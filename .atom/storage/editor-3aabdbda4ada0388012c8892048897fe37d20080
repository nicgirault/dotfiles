{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":49,"width":1920,"height":1031,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/nico/projects/bnp-ip-flux"],"buffers":[{"text":"__author__ = 'mickael'\nfrom sqlalchemy import func, and_\nfrom sqlalchemy.sql.functions import GenericFunction\nfrom sqlalchemy.dialects.postgresql import JSON\nfrom sqlalchemy.sql.expression import desc\nfrom sqlalchemy.orm.exc import NoResultFound\n\nfrom lib.models import Compartment, CLP, Fundshare, MetaFundshare\nfrom lib.models import Valuation, SpecificValuation\nfrom lib.models import Application\nfrom lib.models import Stat, Document, Referential\nfrom lib.models import Patch\nfrom lib.models import User\nfrom lib.models import DeletedElement\n\nfrom config import global_config as config\nfrom .database_object import DataBaseObject\nfrom .profile import ProfileFactory\nimport logging\n\n# The number of different statistics types\n# WARNING: there is 9 different tags, but 3 of them are never available...\nNB_DIFFERENT_STAT_TYPES = 6\n\n\nclass MergeJSON(GenericFunction):\n    type = JSON\n    name = \"merge_json\"\n    identifier = \"merge_json\"\n\n\nclass DataBase(DataBaseObject):\n    def get_compartment_by_uid(self, compartment_uid):\n        return self.session.query(Compartment)\\\n            .filter(Compartment.uid == compartment_uid)\\\n            .one()\n\n    def get_fundshare_by_uid(self, fundshare_uid):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.uid == fundshare_uid)\\\n            .one()\n\n    def get_compartment_metadata_by_uid(self, compartment_uid):\n        return self.session.query(CLP.id,\n                                  CLP.profile,\n                                  CLP.country,\n                                  CLP.language,\n                                  Application.name,\n                                  Compartment.uid)\\\n            .join((Compartment.profiles, CLP))\\\n            .filter(CLP.application_id == Application.id)\\\n            .filter(Compartment.uid == compartment_uid)\\\n            .all()\n\n    def get_compartment(self, compartment_id, country, language):\n        return self.session.query(Compartment)\\\n            .filter(Compartment.country == country)\\\n            .filter(Compartment.language == language)\\\n            .filter(Compartment.id == compartment_id)\\\n            .one()\n\n    def get_compartments_fuzzy(self, compartment_id, country=None, language=None):\n        \"\"\" Get compartment(s) by ID, and optionnaly filter by country/language \"\"\"\n\n        compartments = self.session.query(Compartment)\\\n            .filter(Compartment.id == compartment_id)\n\n        if country:\n            compartments = compartments.filter(Compartment.country == country)\n        if language:\n            compartments = compartments.filter(Compartment.language == language)\n\n        return compartments.all()\n\n    def get_fundshares_fuzzy(self, fundshare_id, country=None, language=None):\n        \"\"\" Get fundshare(s) by ID, and optionnaly filter by country/language \"\"\"\n\n        fundshares = self.session.query(Fundshare)\\\n            .filter(Fundshare.id == fundshare_id)\n\n        if country:\n            fundshares = fundshares.filter(Fundshare.country == country)\n        if language:\n            fundshares = fundshares.filter(Fundshare.language == language)\n\n        return fundshares.all()\n\n    def get_compartments_not_in_list(self, uid_list):\n        if not uid_list:\n            return self.session.query(Compartment).all()\n        else:\n            return self.session.query(Compartment)\\\n                           .filter(Compartment.uid.notin_(uid_list))\\\n                           .all()\n\n    def get_fundshares_not_in_list(self, uid_list):\n        if not uid_list:\n            return self.session.query(Fundshare).all()\n        else:\n            return self.session.query(Fundshare)\\\n                           .filter(Fundshare.uid.notin_(uid_list))\\\n                           .all()\n\n    def get_all_compartments(self):\n        return self.session.query(Compartment)\\\n            .all()\n\n    def get_all_fundshares(self):\n        return self.session.query(Fundshare)\\\n            .all()\n\n    def get_one_compartment(self):\n        return self.session.query(Compartment)\\\n            .first()\n\n    def get_one_fundshare(self):\n        return self.session.query(Fundshare)\\\n            .first()\n\n    def get_compartments_lock_by_clp(self, country, language, profile):\n        clp = self.session.query(CLP)\\\n            .filter(CLP.country == country)\\\n            .filter(CLP.language == language)\\\n            .filter(CLP.profile == profile)\\\n            .one()\n        return self.session.query(Compartment.id, Compartment.locked)\\\n            .filter(Compartment.country == country)\\\n            .filter(Compartment.language == language)\\\n            .filter(Compartment.profiles.any(CLP.id.in_([clp.id])))\\\n            .all()\n\n    def get_fundshare_lock_by_clp(self, country, language, profile):\n        clp = self.session.query(CLP)\\\n            .filter(CLP.country == country)\\\n            .filter(CLP.language == language)\\\n            .filter(CLP.profile == profile)\\\n            .one()\n        return self.session.query(Fundshare.id, Fundshare.locked)\\\n            .filter(Fundshare.compartment == Compartment.uid)\\\n            .filter(Compartment.country == country)\\\n            .filter(Compartment.language == language)\\\n            .filter(Compartment.profiles.any(CLP.id.in_([clp.id])))\\\n            .all()\n\n    def update_compartment(self, compartment_id, country, language, content, locked):\n        \"\"\" Update the given compartment with a new content (aka 'funds_json') \"\"\"\n        return self.session.query(Compartment)\\\n            .filter(Compartment.country == country)\\\n            .filter(Compartment.language == language)\\\n            .filter(Compartment.id == compartment_id)\\\n            .update({Compartment.json: content, Compartment.locked: locked})\n\n    def update_fundshare(self, fundshare_id, country, language, content, locked):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.country == country)\\\n            .filter(Fundshare.language == language)\\\n            .filter(Fundshare.id == fundshare_id)\\\n            .update({Fundshare.json: content, Fundshare.locked: locked})\n\n    def get_clp(self, country, language, profile):\n        return self.session.query(CLP)\\\n            .filter(CLP.country == country)\\\n            .filter(CLP.language == language)\\\n            .filter(CLP.profile == profile)\\\n            .one()\n\n    def get_fundshare(self, fundshare_gid, country, language):\n        if country is None and language is None:\n            try:\n                int(fundshare_gid)\n                fundshare_gid_condition = Fundshare.id == fundshare_gid\n            except ValueError:\n                fundshare_gid_condition = Fundshare.isin == fundshare_gid\n            fundshare = self.session.query(Fundshare).filter(fundshare_gid_condition).first()\n            if fundshare is None:\n                raise NoResultFound\n            return fundshare\n        else:\n            return self.session.query(Fundshare)\\\n                .filter(Fundshare.country == country)\\\n                .filter(Fundshare.language == language)\\\n                .filter(Fundshare.id == fundshare_gid)\\\n                .one()\n\n    def get_fundshares(self, fundshare_id, country):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.country == country)\\\n            .filter(Fundshare.id == fundshare_id)\\\n            .all()\n\n    def count_fundshares(self, fundshare_id, country):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.country == country)\\\n            .filter(Fundshare.id == fundshare_id)\\\n            .count()\n\n    def get_fundshares_by_isin(self, isin):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.isin == isin)\\\n            .all()\n\n    def get_fundshares_of_compartment(self, compartment_uid):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.compartment == compartment_uid)\\\n            .all()\n\n    def get_valuation(self, fundshare_id, country, date, currency=\"EUR\"):\n        return self.session.query(Valuation)\\\n            .filter(Valuation.fundshare_id == fundshare_id)\\\n            .filter(Valuation.country == country)\\\n            .filter(Valuation.date == date)\\\n            .filter(Valuation.currency == currency)\\\n            .one()\n\n    def get_valuation_spe(self, fundshare_id, country, vl_type, type, date, currency):\n        return self.session.query(SpecificValuation)\\\n            .filter(SpecificValuation.fundshare_id == fundshare_id)\\\n            .filter(SpecificValuation.country == country)\\\n            .filter(SpecificValuation.currency == currency)\\\n            .filter(SpecificValuation.date == date)\\\n            .filter(SpecificValuation.vl_type == vl_type)\\\n            .filter(SpecificValuation.type == type)\\\n            .one()\n\n    def get_valuation_spe_fuzzy(self, fundshare_id, country, vl_type=None, type=None, date=None, currency=None):\n        results = self.session.query(SpecificValuation)\\\n            .filter(SpecificValuation.fundshare_id == fundshare_id)\\\n            .filter(SpecificValuation.country == country)\n\n        if vl_type:\n            results = results.filter(SpecificValuation.vl_type == vl_type)\n        if type:\n            results = results.filter(SpecificValuation.type == type)\n        if date:\n            results = results.filter(SpecificValuation.date == date)\n        if currency:\n            results = results.filter(SpecificValuation.currency == currency)\n\n        return results.all()\n\n    def get_applications(self):\n        return self.session.query(Application)\\\n            .all()\n\n    def get_profiles(self, application_id):\n        \"\"\" Return the list of the profiles linked to an application ID \"\"\"\n        return self.session.query(CLP)\\\n            .filter(CLP.application_id == application_id)\\\n            .all()\n\n    def get_application(self, id):\n        return self.session.query(Application)\\\n            .filter(Application.id == id).one()\n\n    def get_vl(self, fundshare_id, country):\n        return self.session.query(Valuation)\\\n            .filter(Valuation.fundshare_id == fundshare_id)\\\n            .filter(Valuation.country == country)\\\n            .all()\n\n    def get_vl_dates(self, fundshare_id, country, date_begin, date_end):\n        return self.session.query(Valuation)\\\n            .filter(Valuation.fundshare_id == fundshare_id)\\\n            .filter(Valuation.country == country)\\\n            .filter(Valuation.date >= date_begin)\\\n            .filter(Valuation.date <= date_end)\\\n            .all()\n\n    def get_one_vl(self):\n        return self.session.query(Valuation)\\\n            .first()\n\n    def get_vl_count(self, fundshare_id, country):\n        return self.session.query(Valuation)\\\n            .filter(Valuation.fundshare_id == fundshare_id)\\\n            .filter(Valuation.country == country)\\\n            .count()\n\n    def get_stats(self, fundshare_id, country, date, language=None, profile=None):\n        \"\"\" Get statistics for a given fundshare and a date \"\"\"\n        stats = self.session.query(Stat)\\\n            .filter(Stat.fundshare_id == fundshare_id)\\\n            .filter(Stat.country == country)\\\n            .filter(Stat.date == date)\\\n\n        if language and profile:\n            stats.join(Fundshare, and_(Stat.fundshare_id == Fundshare.id, Stat.country == Fundshare.country))\\\n            .join((CLP, Fundshare.profiles))\\\n            .filter(\n                CLP.profile == profile,\n                CLP.language == language,\n            )\n\n        return stats.all()\n\n    def get_stats_last_complete_date(self, fundshare_id, country, language=None, profile=None):\n        \"\"\" Get statistics for a given fundshare, at the last date all the stats were available \"\"\"\n        # First, find the date\n        date = self.session.query(Stat.date)\\\n            .filter(Stat.fundshare_id == fundshare_id)\\\n            .filter(Stat.country == country)\\\n            .group_by(Stat.date)\\\n            .having(func.count(Stat.uid) == NB_DIFFERENT_STAT_TYPES)\\\n            .order_by(desc(Stat.date))\\\n            .first()\n        # Then return the stats for this date\n        return self.get_stats(fundshare_id, country, date, language, profile) if date is not None else []\n\n    def get_stats_latest(self, fundshare_id, country, language=None, profile=None):\n        \"\"\" Get statistics for a given fundshare, the most recent for each \"\"\"\n        # Get all the statistics types\n        stats_types = self.session.query(Stat.type)\\\n            .group_by(Stat.type)\\\n            .all()\n        latest_stats = []\n        for type in stats_types:\n            stat = self.session.query(Stat)\\\n            .filter(Stat.fundshare_id == fundshare_id)\\\n            .filter(Stat.type == type)\\\n            .filter(Stat.country == country)\n\n            if language is not None:\n                stat = stat.join(Fundshare, and_(Stat.fundshare_id == Fundshare.id, Stat.country == Fundshare.country))\\\n                .join((CLP, Fundshare.profiles))\\\n                .filter(\n                    CLP.profile == profile,\n                    CLP.language == language,\n                )\n\n            stat = stat.order_by(desc(Stat.date))\\\n            .first()\n\n            if stat:\n                latest_stats.append(stat)\n        return latest_stats\n\n    def get_documents(self, container_type, container_id, country=None, profile=None):\n        \"\"\" Get documents \"\"\"\n        container_type = container_type.upper()\n\n        if container_type in ['SHARE', 'COMPARTMENT']:\n            documents = self.session.query(Document)\\\n                .filter(Document.level == container_type)\\\n                .filter(Document.container_id == container_id)\n\n            # Pinpoint the documents with country and language filters\n            if country is not None:\n                documents = documents.filter(Document.country == country)\n\n            if profile is not None:\n                documents = documents.filter(Document.profile == profile)\n\n            return documents.all()\n        else:\n            logging.error(\"Unable to understand container type \\\"%s\\\" !\" % container_type)\n            return []\n\n    def get_referential(self, language, category, type):\n        \"\"\" Get a single referential \"\"\"\n        return self.session.query(Referential)\\\n            .filter(Referential.language == language)\\\n            .filter(Referential.category == category)\\\n            .filter(Referential.type == type)\\\n            .one()\n\n    def get_referentials(self, language, category):\n        \"\"\" Get the referentials list for a category \"\"\"\n        return self.session.query(Referential)\\\n            .filter(Referential.language == language)\\\n            .filter(Referential.category == category)\\\n            .all()\n\n    def merge_container(self, container, container_id, country, language, new_json):\n        \"\"\" Merge `new_json` into the original json \"\"\"\n        return self.session.query(container)\\\n            .filter(container.country == country)\\\n            .filter(container.language == language)\\\n            .filter(container.id == container_id)\\\n            .update({container.json: func.merge_json(container.json, new_json)},\n                    synchronize_session=\"fetch\")\n\n    def find_user(self, email):\n        return self.session.query(User) \\\n            .filter(User.email == email) \\\n            .one()\n\n    def get_celery_tasks(self, limit=config.DISLAYED_TASKS_MAX_NUMBER):\n        \"\"\" Get all the celery tasks \"\"\"\n        # The tasks are not part of the models (generated by the Celery daemon), so we have to write a custom SQL query\n        sql = \"\"\"SELECT id, task_id, status, to_char(date_done::timestamp at time zone 'UTC+02', 'DD/MM HH24:MI:SS') as date_done, traceback\nFROM celery_taskmeta\nORDER BY id DESC\nLIMIT %d\"\"\" % limit\n\n        return self.raw_sql(sql)\n\n    def get_history_patches(self, container_type):\n        patches = self.session.query(Patch)\\\n            .filter(Patch.container_type == container_type)\\\n            .all()\n\n        return [\n            patch.json_patch\n            for patch in patches\n        ]\n\n    def get_deleted_elements(self):\n        return self.session.query(DeletedElement)\\\n            .order_by(DeletedElement.type, DeletedElement.element_id)\\\n            .all()\n\n    def get_deleted_element(self, deleted_element_id):\n        return self.session.query(DeletedElement)\\\n            .filter(DeletedElement.id == deleted_element_id)\\\n            .one()\n\n    def delete_element(self, deleted_element):\n        type = deleted_element.type\n        if type == 'fundshare':\n            element = self.session.query(Fundshare)\\\n                .filter(Fundshare.id == deleted_element.element_id)\\\n                .filter(Fundshare.country == deleted_element.country)\\\n                .filter(Fundshare.language == deleted_element.language)\\\n                .one()\n\n        elif type == 'compartment':\n            element = self.session.query(Compartment)\\\n                .filter(Compartment.id == deleted_element.element_id)\\\n                .filter(Compartment.country == deleted_element.country)\\\n                .filter(Compartment.language == deleted_element.language)\\\n                .one()\n        else:\n            raise Exception(\"Unknown type: %s\" % type)\n\n        self.session.delete(element)\n        self.session.commit()\n\n    def update_lock_state_fundshares(self, uid_list, new_state_is_locked=True):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.uid.in_(uid_list))\\\n            .update({Fundshare.locked: new_state_is_locked},\n                    synchronize_session=\"fetch\")\n\n    def update_lock_state_compartments(self, uid_list, new_state_is_locked=True):\n        return self.session.query(Compartment)\\\n            .filter(Compartment.uid.in_(uid_list))\\\n            .update({Compartment.locked: new_state_is_locked},\n                    synchronize_session=\"fetch\")\n\n    def count_vl_spe_number(self, fundshare_id, country):\n        return self.session.query(func.count(SpecificValuation.vl_type), SpecificValuation.vl_type)\\\n            .filter(SpecificValuation.fundshare_id == fundshare_id)\\\n            .filter(SpecificValuation.country == country)\\\n            .group_by(SpecificValuation.vl_type)\\\n            .all()\n\n    def count_vl_spe_number_by_clp(self, country, language, profile):\n        fundshares = ProfileFactory().get_fundshares_by_clp(country, language, profile)\n        fundshares_id_list = [fundshare.id for fundshare in fundshares]\n        return self.session.query(SpecificValuation.fundshare_id, SpecificValuation.vl_type, func.count(SpecificValuation.vl_type))\\\n            .filter(SpecificValuation.fundshare_id.in_(fundshares_id_list))\\\n            .filter(SpecificValuation.country == country)\\\n            .group_by(SpecificValuation.vl_type)\\\n            .group_by(SpecificValuation.fundshare_id)\\\n            .all()\n\n    def delete_metafundshare(self, id, country):\n        self.session.query(MetaFundshare)\\\n            .filter_by(id=id, country=country)\\\n            .delete(synchronize_session=False)\n\n    def filter_metafundshares_by_clp(self, metafundshares, country, language, profile):\n        return metafundshares\\\n            .join(Fundshare, and_(MetaFundshare.id == Fundshare.id, MetaFundshare.country == Fundshare.country))\\\n            .join((CLP, Fundshare.profiles))\\\n            .filter(\n                CLP.profile == profile,\n                CLP.country == country,\n                CLP.language == language,\n            )\n","markerStore":{"nextMarkerId":381,"markersById":{"0":{"range":{"start":{"row":172,"column":52},"end":{"row":172,"column":56}},"properties":{"type":"selection","editorId":16,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":4,"undoStack":[{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[36,8],[36,21]],"properties":{"type":"selection","editorId":16},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"from sqlalchemy.orm.exc import NoResultFound\n"}},{"type":"change","content":{"oldRange":[[166,0],[166,0]],"newRange":[[166,0],[183,0]],"oldText":"","newText":"    def get_fundshare(self, fundshare_gid, country, language):\n        if country is None and language is None:\n            try:\n                int(fundshare_gid)\n                fundshare_gid_condition = Fundshare.id == fundshare_gid\n            except ValueError:\n                fundshare_gid_condition = Fundshare.isin == fundshare_gid\n            fundshare = self.session.query(Fundshare).filter(fundshare_gid_condition).first()\n            if fundshare is None:\n                raise NoResultFound\n            return fundshare\n        else:\n            return self.session.query(Fundshare)\\\n                .filter(Fundshare.country == country)\\\n                .filter(Fundshare.language == language)\\\n                .filter(Fundshare.id == fundshare_gid)\\\n                .one()\n"}},{"type":"change","content":{"oldRange":[[183,0],[189,0]],"newRange":[[183,0],[183,0]],"oldText":"    def get_fundshare(self, fundshare_id, country, language):\n        return self.session.query(Fundshare)\\\n            .filter(Fundshare.country == country)\\\n            .filter(Fundshare.language == language)\\\n            .filter(Fundshare.id == fundshare_id)\\\n            .one()\n","newText":""}},{"type":"checkpoint","id":3,"snapshot":{"0":{"range":[[37,8],[37,21]],"properties":{"type":"selection","editorId":16},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/monolithic_db.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0d6af9a1d35fa51fa8c30bc2e0c6855ab8340f8d","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nfrom requests import request\nimport simplejson\nfrom config import global_config as config\n\"\"\"\n    Tests API 2.0 responses\n\"\"\"\n\n# Status codes\ndef test_routes_status_code():\n    routes = []\n\n    # Catalog\n    routes.extend([\n        ('profile/FRA/FRE/EX_FR-XDM', 200),\n        ('profile/FRA/FRE/EX_FR-XDM/', 200),\n        ('profile/FRA/FRE/EX_FR-XDA', 404),\n        ('profile/KLO/FRE/EX_FR-XDM', 404),\n        ('profile/FRA/FRE/EX_FR-XDM/catalog', 200),\n        ('profile/KLO/FRE/EX_FR-XDM/catalog', 404),\n        ('profile/BEL/DUT/EX_BE-XDM/catalog?reg_countries=true', 200),\n    ])\n\n    # Fundshares\n    profile_path = 'profile/FRA/FRE/EX_FR-XDM/'\n    routes.extend([\n        (profile_path+'fundshare/', 404), # No list system defined\n        (profile_path+'fundshare/3333', 200),\n        (profile_path+'fundshare/LU0075933415', 200),\n        (profile_path+'fundshare/LU0075933415', 200),\n        (profile_path+'fundshare/LU0075933410', 404),\n    ])\n\n    # Compartments\n    profile_path = 'profile/FRA/FRE/EX_FR-XDM/'\n    routes.extend([\n        (profile_path+'compartment', 200),\n        (profile_path+'compartment/', 200),\n        ('profile/FRA/FRO/EX_FR-XDM/compartment', 404),\n        (profile_path+'compartment/638', 200),\n        (profile_path+'compartment/12345678', 404),\n    ])\n\n    # Valuations\n    fundshare_paths = ('profile/FRA/FRE/EX_FR-XDM/fundshare/3333/',\n                       'profile/FRA/FRE/EX_FR-XDM/fundshare/LU0075933415/')\n\n    for fundshare_path in fundshare_paths:\n        # Valuations\n        routes.extend([\n            (fundshare_path+'valuation', 200),\n            (fundshare_path+'valuation?currency=EUR', 200),\n            (fundshare_path+'valuation?currency=EUR', 200),\n            (fundshare_path+'valuation?exact_date=2014-01-24', 200),\n            (fundshare_path+'valuation?exact_date=2014-01-45', 400),\n        ])\n\n        # Specific valuations\n        routes.extend([\n            (fundshare_path+'specificvaluation', 200),\n            (fundshare_path+'specificvaluation?currency=EUR', 200),\n            (fundshare_path+'specificvaluation?currency=EUR', 200),\n            (fundshare_path+'specificvaluation?type=aze', 200),\n            (fundshare_path+'specificvaluation?vl_type=aze', 200),\n            (fundshare_path+'specificvaluation?currency=EUR', 200),\n            (fundshare_path+'specificvaluation?exact_date=2014-01-24', 200),\n            (fundshare_path+'specificvaluation?exact_date=2014-01-45', 400),\n            (fundshare_path+'specificvaluation?date_begin=2014-06-01&date_end=2014-06-30', 200),\n        ])\n\n        # Performance\n        routes.extend([\n            (fundshare_path+'performance', 200),\n            (fundshare_path+'performance?exact_date=2014-09-30&perf_type=perfcum&type=SI&index=bench', 200),\n            (fundshare_path+'performance?perf_type=perfcum&get_last=true', 200),\n            (fundshare_path+'performance?get_last=true', 400),\n        ])\n\n        # Performance graph\n        routes.extend([\n            (fundshare_path+'performance-graph', 200),\n            (fundshare_path+'performance-graph?exact_date=2014-09-30&index=bench', 200),\n        ])\n\n        # Performance YTD\n        routes.extend([\n            (fundshare_path+'performance-ytd', 200),\n            (fundshare_path+'performance-ytd?exact_date=2014-09-30&index=bench&perf_type=perfcum', 200),\n        ])\n\n        # Stats\n        routes.extend([\n            (fundshare_path+'stat', 200),\n            (fundshare_path+'stat?exact_date=2014-09-30', 200),\n            (fundshare_path+'stat?allow_different_dates=true', 200),\n            (fundshare_path+'stat?allow_different_dates=true&exact_date=2014-09-30', 400),\n        ])\n\n        # Dividend\n        routes.extend([\n            (fundshare_path+'dividend', 200),\n            (fundshare_path+'dividend?currency=EUR', 200),\n        ])\n\n    # Valuations\n    routes.extend([\n        (profile_path+'valuation', 200)\n    ])\n\n    # Specific valuations\n    routes.extend([\n        (profile_path+'specificvaluation', 200)\n    ])\n\n    # Document\n    routes.extend([\n        (profile_path+'document', 200),\n        (profile_path+'document?doc_language=FRE', 200),\n    ])\n\n    # Referential\n    routes.extend([\n        ('referential', 200),\n        ('referential/', 200),\n        ('referential/type=dsfsf', 200),\n    ])\n\n    for route in routes:\n        response = request('GET', config.API_BASE_PATH+'v2/'+route[0])\n        assert response.status_code == route[1] \\\n            , \"Route %s should return a %d status code (returned %d)\"\\\n              % (route[0], route[1], response.status_code)\n\n\ndef test_get_valuations_profile():\n    response = request('GET', config.API_BASE_PATH+'v2/profile/FRA/FRE/EX_FR-XDM/valuation?currency=AUD')\n    r = simplejson.loads(response.text)\n    assert 'isin' in r[0], \"The valuations should provide their ISIN code\"\n    assert len(r[0]['isin']) == 12, \"The valuations should provide a valid ISIN code\"\n    assert len(r) == 3, \"There should be 3 USD valuation in base for profile EX_FR-XDM, found %d\" % len(r)\n","markerStore":{"nextMarkerId":4,"markersById":{"0":{"range":{"start":{"row":44,"column":50},"end":{"row":44,"column":64}},"properties":{"type":"selection","editorId":44,"autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":4,"undoStack":[{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[27,23],[27,37]],"properties":{"type":"selection","editorId":44,"autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":3,"snapshot":{"0":{"range":[[27,23],[27,37]],"properties":{"type":"selection","editorId":44,"autoscroll":true,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v2.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3e4cb484698616e8997d06beeb167998418c28bd","deserializer":"TextBuffer","version":2},{"text":"from requests import request\nimport simplejson\nimport unittest\nfrom config import global_config as config\n\n\nclass FundsheetApiTest(unittest.TestCase):\n    ids = [4613, 14202, 2432, 3824, 10380, 4614, 15555, 1740]\n    request_params = [\n        (\"full\", ids[0], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[1], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[2], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[3], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[4], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[5], \"FRA\", \"FRE\", \"EX_FR-XDM\"),\n        (\"full\", ids[6], \"BEL\", \"DUT\", \"EX_BE-XDM\"),\n        (\"full\", ids[7], \"ITA\", \"ITA\", \"EX_IT-XDM\"),\n    ]\n\n    base_url = \"v3/fundsheet?version=%s&fundshare_generic_id=%s&country=%s&language=%s&profile=%s\"\n\n    expected = {\n        ids[0]: {\n            'header': {\n                'name': \"PARVEST EQUITY AUSTRALIA\",\n                'previous_name': \"PARVEST AUSTRALIA\",\n            },\n            'classification': 5,\n            'fundshare_selection': {\n                'isin': \"LU0111482476\",\n                'default_fundshare': \"4613\",\n                'currency': \"AUD\",\n                'share_types': {\"4613\": \"Classic - Capitalisation\"},\n                'document': {},\n                'disclaimer_texts': {},\n                'codes': 13,\n                'currencies': [\n                    \"AUD\",\n                    \"EUR\"\n                ],\n                'morning_star': '0',\n                'flags': 2,\n            },\n            'risk': {\n                'srri_risk': \"6\",\n                'kiid': \"\",\n            },\n            'awards': ['test_image_url'],\n            'ratings': ['http://www.bnpparibas-ip.fr/resources/images/NOVETHIC_RATING_2014_EUR_1_fre.png'],\n            'label': ['NOVETHIC_RATING_2014'],\n            'publications': {},\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {\n                    'AUD': {\n                        'compart_size': '50186907.4783',\n                        'currency': 'Dollar australien',\n                        'date': '2014-01-01',\n                        'number_of_shares': '155818',\n                        'share_size': '47384263.5312'\n                    },\n                    'EUR': {\n                        'compart_size': '50186907.4783',\n                        'currency': 'Euro',\n                        'date': '2013-01-01',\n                        'number_of_shares': '155818',\n                        'share_size': '47384263.5312'\n                    }\n                },\n                'two_latest_nav': {\n                    'AUD': [\n                        {\n                            'date': '2014-01-01',\n                            'currency': 'Dollar australien',\n                            'nav': '304.1'\n                        },\n                        {\n                            'date': '2003-01-02',\n                            'currency': 'Dollar australien',\n                            'nav': '304.1'\n                        }\n                    ],\n                    'EUR': [\n                        {\n                            'date': '2013-01-01',\n                            'currency': 'Euro',\n                            'nav': '304.1'\n                        }\n                    ]\n                }\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {\n                        \"date\": \"02/01/2003\",\n                        \"value\": \"50186907.4783\"\n                    },\n                    'base_currency': \"AUD\",\n                    'three_years_performances': {\n                        'bench': \"15.13 %\",\n                        'share': \"13.72 %\"\n                    },\n                    \"other_currencies_performances\": {\n                        \"AUD\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {\n                                \"bench\": \"15.13 %\",\n                                \"share\": \"13.72 %\"\n                            }\n                        },\n                        \"EUR\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        }\n                    },\n                    'performance_ytd': \"\",\n                },\n                'inv_goal': u\"Le Fonds cherche \\xe0 accro\\xeetre la valeur de ses actifs \\xe0 moyen terme en investissant dans des actions \\xe9mises par des soci\\xe9t\\xe9s australiennes et/ou des soci\\xe9t\\xe9s exer\\xe7ant leurs activit\\xe9s en Australie. Le Fonds est activement g\\xe9r\\xe9 et, en tant que tel, peut investir dans des titres qui ne sont pas int\\xe9gr\\xe9s dans l'indice, le S&P/ASX 200 (RI).\",\n                'registration_countries': [\n                    u'Autriche',\n                    u'Belgique',\n                    u'Bahrein',\n                    u'Suisse',\n                    u'Chili',\n                    u'Chypre',\n                    u'R\\xe9publique Tch\\xe8que',\n                    u'Allemagne',\n                    u'Danemark',\n                    u'Espagne',\n                    u'Finlande',\n                    u'France',\n                    u'Royaume-Uni',\n                    u'Gr\\xe8ce',\n                    u'Hongrie',\n                    u'Italie',\n                    u'Jersey',\n                    u'Liban',\n                    u'Liechtenstein',\n                    u'Luxembourg',\n                    u'Pays-Bas',\n                    u'Norv\\xe8ge',\n                    u'P\\xe9rou',\n                    u'Portugal',\n                    u'Singapour',\n                    u'Slovaquie',\n                    u'Su\\xe8de',\n                    u'Taiwan'\n                ],\n                \"key_facts\": {\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": [\n                        u\"Un produit offrant des rendements comparables \\xe0 ceux des actions, avec une volatilit\\xe9 et une prise de risque plus faibles \",\n                        u\"Une \\xe9quipe de g\\xe9rants exp\\xe9riment\\xe9s et sp\\xe9cialis\\xe9s sur le march\\xe9 europ\\xe9en \",\n                        u\"Un fonds b\\xe9n\\xe9ficiant d'un bon positionnement concurrentiel et de performances attractives*\",\n                        u\"Un portefeuille diversifi\\xe9 de 40 \\xe0 80 titres s\\xe9lectionn\\xe9s sur la base des plus fortes convictions de nos \\xe9quipes\"\n                    ],\n                    \"key_selling_points_footnotes\": [\n                        u\"* Les performances et r\\xe9alisations du pass\\xe9 ne pr\\xe9sument en rien des performances actuelles ou \\xe0 venir.\"\n                    ]\n                },\n                \"how_to_invest\": \"You can invest in this fund by buying a Heart of Gold.\"\n            },\n            'performances': {\n                'risk_analysis': {\n                    'stats': {\n                        'alpha': -2.9069968028655913,\n                        'beta': 1.087379477230978,\n                        'information_ratio': -0.4969027906833107,\n                        'r2': \"\",\n                        'sharpe_ratio': 0.8704181864467914,\n                        'tracking_error': \"\",\n                        'volatility': 12.79339115375921,\n                    },\n                    'date': '2015-02-27',\n                },\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': 'FCP',\n                'opening_date': '26/09/2000',\n                'launch_date': '26/09/2000',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS FRANCE',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, FRANCE BRANCH',\n                'delegated_management': [\n                  'BNP PARIBAS INVESTMENT PARTNERS ASIA Ltd',\n                  'BNP PARIBAS ASSET MANAGEMENT',\n                  'Arnhem Investment Management Pty Ltd'\n                ],\n                'base_currency': 'Dollar australien',\n                'asset_class': 'Actions',\n                'ucits': 'UCITS',\n                'domicile': 'Luxembourg',\n            },\n            'fees': {\n                'fees': {\n                    'TER': \"1.91 %\",\n                    'TFO': \"1.91 %\",\n                    'estimated_ongoing_charges': \"2.01 %\",\n                    'maximum_management_fees': \"1.5 %\",\n                    'maximum_redemption_fixed_fees': \"0 %\",\n                    'maximum_subscription_fixed_fees': \"5 %\",\n                    'real_management_fees': \"1.5 %\"\n                },\n                'valorisation': {\n                    'centralization': \"1\",\n                    'centralization_frequency': \"51\",\n                    'valorisation_period': \"133\",\n                    'valorization_frequency': \"Hebdomadaire\"\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[1]: {\n            'header': {\n                'name': \"BNP PARIBAS PLAN EASY FUTURE 2021\",\n                'previous_name': \"\",\n            },\n            'classification': 0,\n            'fundshare_selection': {\n                'isin': \"LU0930018931\",\n                'default_fundshare': \"14202\",\n                'currency': \"EUR\",\n                'share_types': {\"14202\": \"Classic - Capitalisation\"},\n                'document': {},\n                'disclaimer_texts': {},\n                'codes': 4,\n                'currencies': [],\n                'morning_star': '0',\n                'flags': 3,\n            },\n            'awards': [],\n            'label': [],\n            'risk': {\n                'srri_risk': \"3\",\n                'kiid': \"\",\n            },\n            'ratings': [],\n            'publications': {},\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {},\n                'two_latest_nav': {}\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {},\n                    'base_currency': \"EUR\",\n                    'three_years_performances': {},\n                    \"other_currencies_performances\": {},\n                    'performance_ytd': \"\",\n                },\n                'inv_goal': u\"Le fonds a pour objectif 1) d'accro\\xeetre la valeur de ses actifs en investissant directement ou indirectement (par le biais de fonds) dans tous types d'actifs et 2) de verser la valeur garantie \\xe0 la date d'\\xe9ch\\xe9ance. La valeur garantie \\xe0 la date d'\\xe9ch\\xe9ance peut augmenter pendant la dur\\xe9e de vie du fonds. Afin de pr\\xe9server cette valeur garantie, le fonds investit directement ou indirectement (via d'autres fonds) dans des titres de cr\\xe9ance, des instruments mon\\xe9taires et des d\\xe9p\\xf4ts \\xe0 terme. Le fonds a une dur\\xe9e de vie d\\xe9termin\\xe9e et augmente progressivement ses investissements dans des actifs jug\\xe9s s\\xfbrs, au fur et \\xe0 mesure que la date d'\\xe9ch\\xe9ance approche. Ce r\\xe9\\xe9quilibrage vers les valeurs s\\xfbres peut \\xe9galement \\xeatre influenc\\xe9 par d'autres facteurs que la dur\\xe9e restante.\",\n                'registration_countries': [\n                    u'Autriche',\n                    u'Belgique',\n                    u'Chypre',\n                    u'R\\xe9publique Tch\\xe8que',\n                    u'Allemagne',\n                    u'Espagne',\n                    u'France',\n                    u'Gr\\xe8ce',\n                    u'Italie',\n                    u'Luxembourg',\n                    u'Pays-Bas',\n                    u'Slovaquie'\n                ],\n                \"key_facts\": {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None\n            },\n            'performances': {\n                'risk_analysis': {}\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': 'SICAV avec Passeport Europeen',\n                'opening_date': '13/09/2013',\n                'launch_date': '26/07/2013',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS LUXEMBOURG',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, LUXEMBOURG BRANCH',\n                'delegated_management': ['THEAM'],\n                'base_currency': 'Euro',\n                'asset_class': '',\n                'ucits': '',\n                'domicile': 'Luxembourg',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": None,\n                    \"TFO\": None,\n                    \"estimated_ongoing_charges\": \"1.62 %\",\n                    \"maximum_management_fees\": \"1.25 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"5.25 %\",\n                    \"real_management_fees\": \"1.25 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": \"51\",\n                    \"valorisation_period\": \"133\",\n                    'valorization_frequency': \"Hebdomadaire\"\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[2]: {\n            'header': {\n                'name': \"BNP PARIBAS PLAN TARGET CLICK FUND 2017\",\n                'previous_name': \"FORTIS PLAN TARGET CLICK FUND 2017\",\n            },\n            'classification': 0,\n            'fundshare_selection': {\n                'isin': \"LU0111805825\",\n                'default_fundshare': \"2432\",\n                'currency': \"EUR\",\n                'share_types': {\"2432\": \"Classic - Capitalisation\"},\n                'document': {\"category\": \"Factsheet\", \"url\": \"http://xmlservices.bnpparibas-ip.com/doc/fact/BNPI-Funds-(28)_EN_(A)BNP-Paribas-Plan-Target-Click-Fund-2014-2022.pdf\"},\n                'disclaimer_texts': {},\n                'codes': 6,\n                'currencies': [],\n                'morning_star': '0',\n                'flags': 2,\n            },\n            'awards': [],\n            'label': [],\n            'risk': {\n                'srri_risk': \"3\",\n                'kiid': \"\",\n            },\n            'ratings': [],\n            'publications': {\n                'ENG': {\n                    'documents': [\n                        {\n                            'category': 'FACTSHEET',\n                            'format': 'pdf',\n                            'language': 'ENG',\n                            'publication_date': '31/08/2014',\n                            'url': 'http://xmlservices.bnpparibas-ip.com/doc/fact/BNPI-Funds-(28)_EN_(A)BNP-Paribas-Plan-Target-Click-Fund-2014-2022.pdf'\n                        }\n                    ],\n                    'name': 'ENG'\n                }\n            },\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {},\n                'two_latest_nav': {}\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {},\n                    'base_currency': \"EUR\",\n                    'three_years_performances': {},\n                    \"other_currencies_performances\": {},\n                    'performance_ytd': \"\"\n                },\n                'inv_goal': u\"Les Target Click Funds (TCF) sont des fonds garantis destin\\xe9s aux investisseurs d\\xe9sireux de pouvoir faire face \\xe0 des engagements financiers futurs tels que le financement de leur retraite et pr\\xe9retraite, de frais scolaires ou universitaires ou d'autres \\xe9ch\\xe9ances de la vie. Cette gamme de fonds autorise une exposition \\xe0 tous les types d'actifs et apporte une protection du capital int\\xe9gralement garantie par Fortis Bank S.A./N.V.\\n\\nLes TCF investissent dans des liquidit\\xe9s, des titres \\xe0 revenu fixe et des fonds ou des produits d\\xe9riv\\xe9s,  lesquels misent pour leur part sur plusieurs classes d'actifs. L'allocation \\xe0 ces composantes est automatiquement ajust\\xe9e dans le temps et plus la dur\\xe9e r\\xe9siduelle est \\xe9lev\\xe9e, plus la participation aux diff\\xe9rentes classes d'actifs est importante. Les TCF offrent une valeur garantie \\xe0 l'\\xe9ch\\xe9ance pouvant augmenter dans le temps dans la mesure o\\xf9 les gains en capital sont assur\\xe9s par un click lorsque les cours de cl\\xf4ture journaliers sont sup\\xe9rieurs aux valeurs garanties existantes.\\n\\nLes TCF permettent aux investisseurs de faire face \\xe0 leurs \\xe9ch\\xe9ances financi\\xe8res gr\\xe2ce \\xe0 un package financier caract\\xe9ris\\xe9 par :\\n1) la libert\\xe9 de choix: les investisseurs peuvent puiser dans une gamme de fonds pour certains sur les 30 prochaines ann\\xe9es afin de couvrir tous les \\xe9v\\xe8nements de la vie qu'ils peuvent souhaiter assurer.\\n2) la performance et la s\\xe9curit\\xe9 : s'ils sont conserv\\xe9s jusqu'\\xe0 l'\\xe9ch\\xe9ance, les TCF peuvent servir des performances exemptes de pertes et garantissent que les gains bloqu\\xe9s ne peuvent plus \\xeatre perdus, et\\n3) la souplesse : si la situation personnelle des investisseurs change avant que les TCF ne soient arriv\\xe9s \\xe0 \\xe9ch\\xe9ance, il est possible d'effectuer des modifications \\xe0 tout moment sans frais et de proc\\xe9der \\xe0 des retraits au cours du march\\xe9 (pouvant \\xeatre inf\\xe9rieur \\xe0 la valeur garantie) sans p\\xe9nalit\\xe9.\\n\\nLes TCF sont destin\\xe9s aux investisseurs qui cherchent un placement pratique pour couvrir leurs besoins financiers futurs, souhaitent des gains en capital mais veulent b\\xe9n\\xe9ficier de la s\\xe9curit\\xe9 offerte par une valeur minimale garantie \\xe0 l'\\xe9ch\\xe9ance et qui sont conscients des risques et des avantages que pr\\xe9sentent les investissements sur plusieurs classes d'actifs.\",\n                'registration_countries': [\n                    u'Autriche',\n                    u'Belgique',\n                    u'R\\xe9publique Tch\\xe8que',\n                    u'Allemagne',\n                    u'Danemark',\n                    u'Finlande',\n                    u'France',\n                    u'Royaume-Uni',\n                    u'Italie',\n                    u'Luxembourg',\n                    u'Pays-Bas',\n                    u'Slovaquie',\n                    u'Su\\xe8de'\n                ],\n                \"key_facts\": {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None\n            },\n            'performances': {\n                'risk_analysis': {}\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': 'SICAV avec Passeport Europeen',\n                'opening_date': '31/10/2000',\n                'launch_date': '31/10/2000',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS LUXEMBOURG',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, LUXEMBOURG BRANCH',\n                'delegated_management': [\n                  'FORTIS INVESTMENT MANAGEMENT NETHERLANDS NV',\n                  'THEAM',\n                  'BNP PARIBAS ASSET MANAGEMENT'\n                ],\n                'base_currency': 'Euro',\n                'asset_class': '',\n                'ucits': '',\n                'domicile': 'Luxembourg',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": \"1.65 %\",\n                    \"TFO\": \"1.65 %\",\n                    \"estimated_ongoing_charges\": \"0.92 %\",\n                    \"maximum_management_fees\": \"1.25 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"5.25 %\",\n                    \"real_management_fees\": \".1 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": \"51\",\n                    \"valorisation_period\": \"133\",\n                    'valorization_frequency': \"Hebdomadaire\"\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"All rights reserved\",\n                \"graph_perf_disclaimer\": \"the graph is awesome\",\n                \"srri_disclaimer\": \"what is srri ?\"\n            }\n        },\n        ids[3]: {\n            'header': {\n                'name': \"PARVEST EQUITY EUROPE SMALL CAP\",\n                'previous_name': \"PARVEST EUROPE SMALL CAP\",\n            },\n            'classification': 0,\n            'fundshare_selection': {\n                'isin': \"LU0212178916\",\n                'default_fundshare': \"3824\",\n                'currency': \"EUR\",\n                'share_types': {\"3824\": \"Classic - Capitalisation\"},\n                'document': {},\n                'disclaimer_texts': {\"teaser\": u\"Les meilleurs talents en Europe. Profitez du potentiel des petites capitalisations flexibles et dynamiques offrant souvent un potentiel de croissance sup\\xe9rieur aux grandes valeurs.\"},\n                'codes': 7,\n                'currencies': [],\n                'morning_star': '0',\n                'flags': 2,\n            },\n            'awards': [],\n            'label': [],\n            'risk': {\n                'srri_risk': \"6\",\n                'kiid': \"\",\n            },\n            'ratings': [],\n            'publications': {},\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {},\n                'two_latest_nav': {}\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {},\n                    'base_currency': \"EUR\",\n                    'three_years_performances': {},\n                    \"other_currencies_performances\": {},\n                    'performance_ytd': \"0.8 %\",\n                },\n                'inv_goal': u\"Le Fonds cherche \\xe0 accro\\xeetre la valeur de ses actifs \\xe0 moyen terme en investissant dans des actions de soci\\xe9t\\xe9s europ\\xe9ennes de petite capitalisation. Le Fonds est activement g\\xe9r\\xe9 et, en tant que tel, peut investir dans des titres qui ne sont pas int\\xe9gr\\xe9s dans l'indice, le MSCI Europe Small Caps (NR).\",\n                'registration_countries': [\n                    u'Autriche',\n                    u'Belgique',\n                    u'Bahrein',\n                    u'Suisse',\n                    u'Chypre',\n                    u'R\\xe9publique Tch\\xe8que',\n                    u'Allemagne',\n                    u'Danemark',\n                    u'Espagne',\n                    u'Finlande',\n                    u'France',\n                    u'Royaume-Uni',\n                    u'Gr\\xe8ce',\n                    u'Hong-kong',\n                    u'Hongrie',\n                    u'Irlande',\n                    u'Italie',\n                    u'Jersey',\n                    u'Cor\\xe9e du sud',\n                    u'Liban',\n                    u'Liechtenstein',\n                    u'Luxembourg',\n                    u'Pays-Bas',\n                    u'Norv\\xe8ge',\n                    u'Portugal',\n                    u'Singapour',\n                    u'Slovaquie',\n                    u'Su\\xe8de',\n                    u'Taiwan'\n                ],\n                \"key_facts\": {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None\n            },\n            'performances': {\n                'risk_analysis': {}\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': 'SICAV avec Passeport Europeen',\n                'opening_date': '24/09/2007',\n                'launch_date': '24/09/2007',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS LUXEMBOURG',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, LUXEMBOURG BRANCH',\n                'delegated_management': ['BNP PARIBAS ASSET MANAGEMENT'],\n                'base_currency': 'Euro',\n                'asset_class': '',\n                'ucits': '',\n                'domicile': 'Luxembourg',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": \"2.15 %\",\n                    \"TFO\": \"2.15 %\",\n                    \"estimated_ongoing_charges\": \"2.29 %\",\n                    \"maximum_management_fees\": \"1.75 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"5 %\",\n                    \"real_management_fees\": \"1.75 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": \"51\",\n                    \"valorisation_period\": \"133\",\n                    'valorization_frequency': \"Hebdomadaire\"\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[4]: {\n            'header': {\n                'name': \"BNP PARIBAS FLEXI I BOND EURO FOCUS CORPORATE\",\n                'previous_name': \"\",\n            },\n            'classification': 0,\n            'fundshare_selection': {\n                'isin': \"LU0749572268\",\n                'default_fundshare': \"10380\",\n                'currency': \"EUR\",\n                'share_types': {\"10380\": \"Classic - Capitalisation\"},\n                'document': {\"category\": \"KIID\", \"url\": \"http://xmlservices.bnpparibas-ip.com/doc/kiid/KIIDOC-2014-09-30-FR-FR-2014-09-29-LU0749572268-BPFLX1_BOND-EURO-FOCS-CPRT_CLAS_C_S22475_20140926111632.pdf\"},\n                'disclaimer_texts': {},\n                'codes': 5,\n                'currencies': [\n                    \"EUR\",\n                    \"USD\"\n                ],\n                'morning_star': '0',\n                'flags': 0,\n            },\n            'awards': [],\n            'label': [],\n            'risk': {\n                'srri_risk': \"3\",\n                'kiid': \"http://xmlservices.bnpparibas-ip.com/doc/kiid/KIIDOC-2014-09-30-FR-FR-2014-09-29-LU0749572268-BPFLX1_BOND-EURO-FOCS-CPRT_CLAS_C_S22475_20140926111632.pdf\",\n            },\n            'ratings': [],\n            \"publications\": {\n                \"FRE\": {\n                    \"documents\": [\n                        {\n                            \"category\": \"KIID\",\n                            \"format\": \"pdf\",\n                            \"language\": \"FRE\",\n                            \"publication_date\": \"29/09/2014\",\n                            \"url\": \"http://xmlservices.bnpparibas-ip.com/doc/kiid/KIIDOC-2014-09-30-FR-FR-2014-09-29-LU0749572268-BPFLX1_BOND-EURO-FOCS-CPRT_CLAS_C_S22475_20140926111632.pdf\"\n                        },\n                        {\n                            \"category\": \"Prospectus complet\",\n                            \"format\": \"pdf\",\n                            \"language\": \"FRE\",\n                            \"publication_date\": \"09/09/2014\",\n                            \"url\": \"http://xmlservices.bnpparibas-ip.com/doc/pros/BNPP_Flexi_I_FR_July_2014_090914.pdf\"\n                        }\n                    ],\n                    \"name\": u\"Fran\\xe7aise\"\n                }\n            },\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {\n                    'EUR': {\n                        'compart_size': '',\n                        'currency': 'Euro',\n                        'date': '2014-09-14',\n                        'number_of_shares': '',\n                        'share_size': ''\n                    },\n                    'USD': {\n                        'compart_size': '',\n                        'currency': 'Dollar',\n                        'date': '2014-09-14',\n                        'number_of_shares': '',\n                        'share_size': ''\n                    }\n                },\n                'two_latest_nav': {\n                    'EUR': [\n                        {\n                            'date': '2014-09-14',\n                            'currency': 'Euro',\n                            'nav': '134.9'\n                        },\n                        {\n                            'date': '2014-09-13',\n                            'currency': 'Euro',\n                            'nav': '134.5'\n                        }\n                    ],\n                    'USD': [\n                        {\n                            'date': '2014-09-14',\n                            'currency': 'Dollar',\n                            'nav': '12.9'\n                        },\n                        {\n                            'date': '2014-09-03',\n                            'currency': 'Dollar',\n                            'nav': '151.84'\n                        }\n                    ]\n                }\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {\n                        \"date\": \"02/01/2014\",\n                        \"value\": \"40481326.88\"\n                    },\n                    'base_currency': \"EUR\",\n                    'three_years_performances': {},\n                    \"other_currencies_performances\": {\n                        \"EUR\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        },\n                        \"USD\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        }\n                    },\n                    'performance_ytd': \"\",\n                },\n                'inv_goal': \"\",\n                'registration_countries': [\n                    u'Autriche',\n                    u'Belgique',\n                    u'Suisse',\n                    u'Allemagne',\n                    u'France',\n                    u'Italie',\n                    u'Luxembourg',\n                    u'Pays-Bas'\n                ],\n                \"key_facts\": {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None\n            },\n            'performances': {\n                'risk_analysis': {}\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': 'SICAV avec Passeport Europeen',\n                'opening_date': '01/03/2012',\n                'launch_date': '23/12/2011',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS LUXEMBOURG',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, LUXEMBOURG BRANCH',\n                'delegated_management': ['BNP PARIBAS ASSET MANAGEMENT'],\n                'base_currency': 'Euro',\n                'asset_class': '',\n                'ucits': '',\n                'domicile': 'Luxembourg',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": \"1.78 %\",\n                    \"TFO\": \"1.78 %\",\n                    \"estimated_ongoing_charges\": \"1.06 %\",\n                    \"maximum_management_fees\": \".75 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"3 %\",\n                    \"real_management_fees\": \".75 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": None,\n                    \"valorisation_period\": \"133\",\n                    \"valorization_frequency\": None\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[5]: {\n            \"awards\": [\n                \"\"\n            ],\n            \"classification\": 5,\n            \"fundshare_selection\": {\n                \"codes\": 11,\n                \"currencies\": [\n                    \"AUD\",\n                    \"EUR\",\n                    \"USD\"\n                ],\n                \"currency\": \"AUD\",\n                \"default_fundshare\": \"4613\",\n                \"disclaimer_texts\": {},\n                \"document\": {},\n                \"flags\": 2,\n                \"isin\": \"LU0111481668\",\n                \"morning_star\": \"3\",\n                \"share_types\": {\n                    \"4613\": \"Classic - Capitalisation\"\n                }\n            },\n            \"header\": {\n                \"name\": \"PARVEST EQUITY AUSTRALIA\",\n                \"previous_name\": \"PARVEST AUSTRALIA\"\n            },\n            \"label\": [],\n            \"nav\": {\n                'nav_info_text': \"Le boulanger a investi dans ce fonds afin que son pain soit plus croustillant\",\n                'latest_dividend': {\n                    \"AUD\": {\n                        \"amount\": \"20.9\",\n                        \"currency\": \"Dollar australien\",\n                        \"execution_date\": \"2014-04-16\",\n                        \"payment_date\": \"2014-04-30\",\n                        \"vl_value\": \"507.39\"\n                    },\n                    \"EUR\": {\n                        \"amount\": \"20.9\",\n                        \"currency\": \"Euro\",\n                        \"execution_date\": \"2014-04-16\",\n                        \"payment_date\": \"2014-04-30\",\n                        \"vl_value\": \"339.05\"\n                    },\n                    \"USD\": {\n                        \"amount\": \"20.9\",\n                        \"currency\": \"Dollar\",\n                        \"execution_date\": \"2014-04-16\",\n                        \"payment_date\": \"2014-04-30\",\n                        \"vl_value\": \"470.11\"\n                    }\n                },\n                \"nav_info\": {\n                    \"AUD\": {\n                        \"compart_size\": \"118954730.69\",\n                        \"currency\": \"Dollar australien\",\n                        \"date\": \"2014-04-30\",\n                        \"number_of_shares\": \"7224.58\",\n                        \"share_size\": \"3665677.39\"\n                    },\n                    \"EUR\": {\n                        \"compart_size\": \"118954730.69\",\n                        \"currency\": \"Euro\",\n                        \"date\": \"2014-04-30\",\n                        \"number_of_shares\": \"7224.58\",\n                        \"share_size\": \"2449500.43\"\n                    },\n                    \"USD\": {\n                        \"compart_size\": \"118954730.69\",\n                        \"currency\": \"Dollar\",\n                        \"date\": \"2014-04-30\",\n                        \"number_of_shares\": \"7224.58\",\n                        \"share_size\": \"3396353.36\"\n                    }\n                },\n                \"two_latest_nav\": {\n                    \"AUD\": [\n                        {\n                            \"currency\": \"Dollar australien\",\n                            \"date\": \"2014-04-30\",\n                            \"nav\": \"507.39\"\n                        }\n                    ],\n                    \"EUR\": [\n                        {\n                            \"currency\": \"Euro\",\n                            \"date\": \"2014-04-30\",\n                            \"nav\": \"339.05\"\n                        }\n                    ],\n                    \"USD\": [\n                        {\n                            \"currency\": \"Dollar\",\n                            \"date\": \"2014-04-30\",\n                            \"nav\": \"470.11\"\n                        }\n                    ]\n                }\n            },\n            \"overview\": {\n                \"inv_goal\": u\"Le Fonds cherche \\xe0 accro\\xeetre la valeur de ses actifs \\xe0 moyen terme en investissant dans des actions \\xe9mises par des soci\\xe9t\\xe9s australiennes et/ou des soci\\xe9t\\xe9s exer\\xe7ant leurs activit\\xe9s en Australie. Le Fonds est activement g\\xe9r\\xe9 et, en tant que tel, peut investir dans des titres qui ne sont pas int\\xe9gr\\xe9s dans l'indice, le S&P/ASX 200 (RI).\",\n                \"key_numbers\": {\n                    \"aum\": {\n                        \"date\": \"30/04/2014\",\n                        \"value\": \"118954730.69\"\n                    },\n                    \"base_currency\": \"AUD\",\n                    \"other_currencies_performances\": {\n                        \"AUD\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        },\n                        \"EUR\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        },\n                        \"USD\": {\n                            \"performance_ytd\": \"\",\n                            \"three_years_performances\": {}\n                        }\n                    },\n                    \"performance_ytd\": \"\",\n                    \"three_years_performances\": {}\n                },\n                \"registration_countries\": [\n                    u\"Autriche\",\n                    u\"Belgique\",\n                    u\"Suisse\",\n                    u\"Allemagne\",\n                    u\"Danemark\",\n                    u\"Espagne\",\n                    u\"Finlande\",\n                    u\"France\",\n                    u\"Royaume-Uni\",\n                    u\"Italie\",\n                    u\"Jersey\",\n                    u\"Cor\\xe9e du sud\",\n                    u\"Luxembourg\",\n                    u\"Pays-Bas\",\n                    u\"Singapour\"\n                ],\n                \"key_facts\": {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None\n            },\n            \"performances\": {\n                \"mgmt_comments\": [],\n                \"perfs\": {\n                    \"annual360\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"annual365\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"calendar\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"cumulated\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    }\n                },\n                \"risk_analysis\": {}\n            },\n            \"publications\": {},\n            \"ratings\": [],\n            \"risk\": {\n                \"kiid\": \"\",\n                \"srri_risk\": \"5\"\n            },\n            'portfolio': {\n                'creation_date': '2000-09-26',\n                'legal_form': 'FCP',\n                'opening_date': '26/09/2000',\n                'launch_date': '26/09/2000',\n                'management_company': 'BNP PARIBAS INVESTMENT PARTNERS FRANCE',\n                'deposit_name': 'BNP PARIBAS SECURITIES SERVICES, FRANCE BRANCH',\n                'delegated_management': [\n                  'BNP PARIBAS INVESTMENT PARTNERS ASIA Ltd',\n                  'BNP PARIBAS ASSET MANAGEMENT',\n                  'Arnhem Investment Management Pty Ltd'\n                ],\n                'base_currency': 'Dollar australien',\n                'asset_class': 'Actions',\n                'ucits': 'UCITS',\n                'domicile': 'Luxembourg',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": \"1.91 %\",\n                    \"TFO\": \"1.91 %\",\n                    \"estimated_ongoing_charges\": \"1.99 %\",\n                    \"maximum_management_fees\": \"1.5 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"5 %\",\n                    \"real_management_fees\": \"1.5 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": \"51\",\n                    \"valorisation_period\": \"133\",\n                    'valorization_frequency': \"Hebdomadaire\"\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[6]: {\n            'header': {\n                'name': \"PARVEST TRUC\",\n                'previous_name': \"\",\n            },\n            'classification': 3,\n            'fundshare_selection': {\n                'isin': \"LU0555555555\",\n                'default_fundshare': \"15555\",\n                'currency': \"EUR\",\n                'share_types': {},\n                'document': {},\n                'disclaimer_texts': {},\n                'codes': 0,\n                'currencies': [],\n                'morning_star': '4',\n                'flags': 0,\n            },\n            'risk': {\n                'srri_risk': \"7\",\n                'kiid': \"\",\n            },\n            'awards': [],\n            'ratings': [],\n            'label': [],\n            'publications': {},\n            'nav': {\n                'nav_info_text': \"\",\n                'latest_dividend': {},\n                'nav_info': {},\n                'two_latest_nav': {}\n            },\n            'overview': {\n                'key_numbers': {\n                    'aum': {},\n                    'base_currency': \"\",\n                    'three_years_performances': {},\n                    \"other_currencies_performances\": {},\n                    'performance_ytd': \"0.5 %\"\n                },\n                'inv_goal': \"\",\n                'registration_countries': ['BEL', 'CHE'],\n                'key_facts': {\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\",\n                    \"key_selling_points\": []\n                },\n                \"how_to_invest\": None,\n                'bench': {'name': ''}\n            },\n            'performances': {\n                'mgmt_comments': [],\n                'perfs': {\n                  'calendar': {\n                    'date': '2015-01-15',\n                    'shares': [],\n                    'samples': [],\n                    'benches': []\n                  },\n                  'cumulated': {\n                    'date': '2015-01-15',\n                    'shares': [\n                      {\n                        'currency': 'EUR',\n                        'type': '5Y',\n                        'value': 43.56\n                      },\n                      {\n                        'currency': 'EUR',\n                        'type': '3Y',\n                        'value': 23.56\n                      },\n                      {\n                        'currency': 'EUR',\n                        'type': '1Y',\n                        'value': 3.56\n                      }\n                    ],\n                    'samples': [\n                      '5Y',\n                      '3Y',\n                      '1Y'\n                    ],\n                    'benches': []\n                  },\n                  'annual365': {\n                    'date': '',\n                    'shares': [],\n                    'samples': [],\n                    'benches': []\n                  },\n                  'annual360': {\n                    'date': '',\n                    'shares': [],\n                    'samples': [],\n                    'benches': []\n                  }\n                },\n                'risk_analysis': {}\n            },\n            'portfolio': {\n                'creation_date': '',\n                'legal_form': '',\n                'opening_date': '',\n                'launch_date': '',\n                'management_company': '',\n                'deposit_name': '',\n                'delegated_management': [],\n                'base_currency': '',\n                'asset_class': 'Alternative Investments & Andere',\n                'ucits': '',\n                'domicile': '',\n                'bench': '',\n                'tob': '1',\n                'financial_service': 'BNP Paribas Securities',\n                'precompte_mobilier': '25',\n                'umbrella': 'BNP PARIBAS COMFORT TRUC',\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": None,\n                    \"TFO\": None,\n                    \"estimated_ongoing_charges\": None,\n                    \"maximum_management_fees\": None,\n                    \"maximum_redemption_fixed_fees\": None,\n                    \"maximum_subscription_fixed_fees\": None,\n                    \"real_management_fees\": None\n                },\n                \"valorisation\": {\n                    \"centralization\": None,\n                    \"centralization_frequency\": None,\n                    \"valorisation_period\": None,\n                    \"valorization_frequency\": None\n                }\n            },\n            'disclaimers': {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            }\n        },\n        ids[7]: {\n            \"awards\": [],\n            \"classification\": 0,\n            \"disclaimers\": {\n                \"fundshare_disclaimer\": \"\",\n                \"graph_perf_disclaimer\": \"\",\n                \"srri_disclaimer\": \"\"\n            },\n            \"fees\": {\n                \"fees\": {\n                    \"TER\": None,\n                    \"TFO\": None,\n                    \"estimated_ongoing_charges\": \"1.53 %\",\n                    \"maximum_management_fees\": \"1.2 %\",\n                    \"maximum_redemption_fixed_fees\": \"0 %\",\n                    \"maximum_subscription_fixed_fees\": \"5 %\",\n                    \"real_management_fees\": \"1.2 %\"\n                },\n                \"valorisation\": {\n                    \"centralization\": \"1\",\n                    \"centralization_frequency\": \"51\",\n                    \"valorisation_period\": \"133\",\n                    \"valorization_frequency\": \"2\"\n                }\n            },\n            \"fundshare_selection\": {\n                \"codes\": 4,\n                \"currencies\": [],\n                \"currency\": \"EUR\",\n                \"default_fundshare\": \"1740\",\n                \"disclaimer_texts\": {},\n                \"document\": {},\n                \"flags\": 0,\n                \"isin\": \"LU0456770527\",\n                \"morning_star\": \"0\",\n                \"share_types\": {\n                    \"1740\": \"CLAS - C\"\n                }\n            },\n            \"header\": {\n                \"name\": \"PARWORLD QUANTITATIVE FIXED INCOME\",\n                \"previous_name\": \"\"\n            },\n            \"label\": [],\n            \"nav\": {\n                \"latest_dividend\": {},\n                \"nav_info\": {},\n                \"nav_info_text\": \"\",\n                \"two_latest_nav\": {}\n            },\n            \"overview\": {\n                \"bench\": {\n                    \"name\": \"Cash Index EONIA [Daily Cap] RI\"\n                },\n                \"inv_goal\": u\"Il Fondo mira a generare un risultato superiore al tasso di rendimento del mercato monetario in euro nel medio termine, investendo in titoli di debito di qualit\\xe0 d'investimento (c.d. investment grade) denominati in euro. Esso attua strategie quantitative di investimento nei tre segmenti del mercato obbligazionario internazionale: tassi di interesse, credito e valute. Si tratta di un fondo a gestione attiva rispetto all'indice Cash Index EONIA (RI).\",\n                \"key_facts\": {\n                    \"key_selling_points\": [],\n                    \"key_selling_points_footnotes\": [],\n                    \"marketing_teaser\": \"\"\n                },\n                \"how_to_invest\": None,\n                \"key_numbers\": {\n                    \"aum\": {},\n                    \"base_currency\": \"EUR\",\n                    \"other_currencies_performances\": {},\n                    \"performance_ytd\": \"\",\n                    \"three_years_performances\": {}\n                },\n                \"registration_countries\": [\n                    \"AUT\",\n                    \"ESP\",\n                    \"FRA\",\n                    \"GBR\",\n                    \"ITA\",\n                    \"LBN\",\n                    \"LUX\",\n                    \"NLD\"\n                ]\n            },\n            \"performances\": {\n                \"mgmt_comments\": [],\n                \"perfs\": {\n                    \"annual360\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"annual365\": {\n                        \"benches\": [],\n                        \"date\": \"\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"calendar\": {\n                        \"benches\": [],\n                        \"date\": \"2015-03-31\",\n                        \"samples\": [],\n                        \"shares\": []\n                    },\n                    \"cumulated\": {\n                        \"benches\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"5Y\",\n                                \"value\": 17.84\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"3Y\",\n                                \"value\": 0.45\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"1Y\",\n                                \"value\": 5.02\n                            }\n                        ],\n                        \"date\": \"2015-03-31\",\n                        \"samples\": [\n                            \"5Y\",\n                            \"3Y\",\n                            \"1Y\"\n                        ],\n                        \"shares\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"5Y\",\n                                \"value\": 20.68\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"3Y\",\n                                \"value\": -1.23\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"1Y\",\n                                \"value\": 10.98\n                            }\n                        ]\n                    },\n                    \"quarterly\": {\n                        \"benches\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"1Y\",\n                                \"value\": 5.02\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"3Y\",\n                                \"value\": 0.45\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"5Y\",\n                                \"value\": 17.84\n                            }\n                        ],\n                        \"date\": \"2015-03-31\",\n                        \"samples\": [\n                            \"1Y\",\n                            \"3Y\",\n                            \"5Y\"\n                        ],\n                        \"shares\": [\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"1Y\",\n                                \"value\": 10.98\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"3Y\",\n                                \"value\": -1.23\n                            },\n                            {\n                                \"currency\": \"EUR\",\n                                \"type\": \"5Y\",\n                                \"value\": 20.68\n                            }\n                        ]\n                    }\n                },\n                \"risk_analysis\": {}\n            },\n            \"portfolio\": {\n                \"asset_class\": \"\",\n                \"base_currency\": \"\",\n                \"bench\": \"Cash Index EONIA [Daily Cap] RI\",\n                \"creation_date\": \"\",\n                \"delegated_management\": [\n                    \"THEAM\",\n                    \"BNP PARIBAS ASSET MANAGEMENT\"\n                ],\n                \"deposit_name\": \"BNP PARIBAS SECURITIES SERVICES, LUXEMBOURG BRANCH\",\n                \"domicile\": \"\",\n                \"launch_date\": \"02/11/2009\",\n                \"legal_form\": \"\",\n                \"management_company\": \"BNP PARIBAS INVESTMENT PARTNERS LUXEMBOURG\",\n                \"opening_date\": \"02/11/2009\",\n                \"ucits\": \"\"\n            },\n            \"publications\": {},\n            \"ratings\": [],\n            \"risk\": {\n                \"kiid\": \"\",\n                \"srri_risk\": \"4\"\n            }\n        }\n    }\n\n    # Status codes\n    def test_routes_status_code(self):\n        routes = []\n\n        # Fundsheet\n        routes.extend([\n            # Success\n            ('fundsheet?version=full&fundshare_generic_id=4613&country=FRA&language=FRE&profile=EX_FR-XDM', 200),\n            # Error 400 when no version\n            ('fundsheet?fundshare_generic_id=4613&country=FRA&language=FRE&profile=EX_FR-XDM', 400),\n            # Error 400 when no fundshare_generic_id\n            ('fundsheet?version=full&country=FRA&language=FRE&profile=EX_FR-XDM', 400),\n            # Error 400 when no country\n            ('fundsheet?version=full&fundshare_generic_id=4613&language=FRE&profile=EX_FR-XDM', 400),\n            # Error 400 when no language\n            ('fundsheet?version=full&fundshare_generic_id=4613&country=FRA&profile=EX_FR-XDM', 400),\n            # Error 400 when no profile\n            ('fundsheet?version=full&fundshare_generic_id=4613&country=FRA&language=FRE', 400),\n        ])\n\n        for route in routes:\n            response = request('GET', config.API_BASE_PATH+'v3/'+route[0])\n            assert response.status_code == route[1] \\\n                , \"Route %s should return a %d status code (returned %d)\"\\\n                  % (route[0], route[1], response.status_code)\n\n    def test_get(self):\n        self.maxDiff = None\n        responses = {params[1]: self.api_get(self.base_url % params)\n            for params in self.request_params}\n\n        for fundshare_id, response in responses.iteritems():\n            self.__test_header(fundshare_id, response[\"header\"])\n            self.__test_classification(fundshare_id, response[\"classification\"])\n            self.__test_fundshare_selection(fundshare_id, response[\"fundshare_selection\"])\n            self.__test_risk(fundshare_id, response[\"risk\"])\n            self.__test_awards(fundshare_id, response[\"awards\"])\n            self.__test_ratings(fundshare_id, response[\"ratings\"])\n            self.__test_label(fundshare_id, response[\"label\"])\n            self.__test_publications(fundshare_id, response[\"publications\"])\n            self.__test_nav(fundshare_id, response[\"nav\"])\n            self.__test_overview(fundshare_id, response[\"overview\"])\n            self.__test_performances(fundshare_id, response[\"performances\"])\n            self.__assert_dict_equals(self.expected[fundshare_id], response, \"portfolio\")\n            self.__assert_dict_equals(self.expected[fundshare_id], response, \"fees\")\n            self.__assert_dict_equals(self.expected[fundshare_id], response, \"disclaimers\")\n\n    def __test_header(self, fundshare_id, header):\n        # Test the name\n        self.assertIn(\"name\", header)\n        self.assertEqual(header[\"name\"], self.expected[fundshare_id][\"header\"][\"name\"])\n\n        # Test the previous name\n        self.assertIn(\"previous_name\", header)\n        self.assertEqual(header[\"previous_name\"], self.expected[fundshare_id][\"header\"][\"previous_name\"])\n\n    def __test_classification(self, fundshare_id, classification):\n        # Test the classification\n        self.assertEqual(len(classification), self.expected[fundshare_id][\"classification\"])\n\n    def __test_fundshare_selection(self, fundshare_id, fundshare_selection):\n        # Test the isin\n        self.assertIn(\"isin\", fundshare_selection)\n        self.assertEqual(fundshare_selection[\"isin\"], self.expected[fundshare_id][\"fundshare_selection\"][\"isin\"])\n\n        # Test the default fundshare\n        self.assertIn(\"default_fundshare\", fundshare_selection)\n        self.assertEqual(fundshare_selection[\"default_fundshare\"], self.expected[fundshare_id][\"fundshare_selection\"][\"default_fundshare\"])\n\n        # Test the base currency\n        self.assertIn(\"currency\", fundshare_selection)\n        self.assertEqual(fundshare_selection[\"currency\"], self.expected[fundshare_id][\"fundshare_selection\"][\"currency\"])\n\n        # Test the share types\n        self.assertIn(\"share_types\", fundshare_selection)\n        self.assertEqual(len(fundshare_selection[\"share_types\"]), len(self.expected[fundshare_id][\"fundshare_selection\"][\"share_types\"]))\n        for fundshare_key in fundshare_selection[\"share_types\"].iterkeys():\n            self.assertEqual(fundshare_selection[\"share_types\"][fundshare_key], self.expected[fundshare_id][\"fundshare_selection\"][\"share_types\"][fundshare_key])\n\n        # Test the document to download\n        self.assertIn(\"document\", fundshare_selection)\n        if fundshare_selection[\"document\"] != {}:\n            self.assertEqual(fundshare_selection[\"document\"][\"category\"], self.expected[fundshare_id][\"fundshare_selection\"][\"document\"][\"category\"])\n            self.assertEqual(fundshare_selection[\"document\"][\"url\"], self.expected[fundshare_id][\"fundshare_selection\"][\"document\"][\"url\"])\n\n        # Test the disclaimer texts\n        self.assertIn(\"disclaimer_texts\", fundshare_selection)\n        self.assertEqual(len(fundshare_selection[\"disclaimer_texts\"]), len(self.expected[fundshare_id][\"fundshare_selection\"][\"disclaimer_texts\"]))\n        for text_category in fundshare_selection[\"disclaimer_texts\"].iterkeys():\n            self.assertEqual(fundshare_selection[\"disclaimer_texts\"][text_category], self.expected[fundshare_id][\"fundshare_selection\"][\"disclaimer_texts\"][text_category])\n\n        # Test the codes for full version\n        self.assertIn(\"codes\", fundshare_selection)\n        self.assertEqual(len(fundshare_selection[\"codes\"]), self.expected[fundshare_id][\"fundshare_selection\"][\"codes\"])\n\n        # Test the currencies for full version\n        self.assertIn(\"currencies\", fundshare_selection)\n        self.assertEqual(len(fundshare_selection[\"currencies\"]), len(self.expected[fundshare_id][\"fundshare_selection\"][\"currencies\"]))\n        for index in range(len(fundshare_selection[\"currencies\"])):\n            self.assertEqual(fundshare_selection[\"currencies\"][index], self.expected[fundshare_id][\"fundshare_selection\"][\"currencies\"][index])\n\n        # Test the morning star\n        self.assertIn(\"morning_star\", fundshare_selection)\n        self.assertEqual(fundshare_selection[\"morning_star\"], self.expected[fundshare_id][\"fundshare_selection\"][\"morning_star\"])\n\n        # Test the flags\n        self.assertIn(\"flags\", fundshare_selection)\n        self.assertEqual(len(fundshare_selection[\"flags\"]), self.expected[fundshare_id][\"fundshare_selection\"][\"flags\"])\n\n    def __test_risk(self, fundshare_id, risk):\n        # Test the srri risk\n        self.assertIn(\"srri_risk\", risk)\n        self.assertEqual(risk[\"srri_risk\"], self.expected[fundshare_id][\"risk\"][\"srri_risk\"])\n\n        # Test the kiid\n        self.assertIn(\"kiid\", risk)\n        self.assertEqual(risk[\"kiid\"], self.expected[fundshare_id][\"risk\"][\"kiid\"])\n\n    def __test_awards(self, fundshare_id, awards):\n        expectedAwards = self.expected[fundshare_id][\"awards\"]\n\n        if len(expectedAwards) > 0:\n            self.assertEqual(len(awards), len(expectedAwards))\n            self.assertEqual(awards[0], expectedAwards[0])\n\n    def __test_ratings(self, fundshare_id, ratings):\n        expectedRatings = self.expected[fundshare_id][\"ratings\"]\n\n        if len(expectedRatings) > 0:\n            self.assertEqual(len(ratings), len(expectedRatings))\n            self.assertEqual(ratings[0], expectedRatings[0])\n\n    def __test_label(self, fundshare_id, label):\n        expectedLabel = self.expected[fundshare_id][\"label\"]\n\n        if len(expectedLabel) > 0:\n            self.assertEqual(len(label), len(expectedLabel))\n            self.assertEqual(label[0], expectedLabel[0])\n\n    def __test_publications(self, fundshare_id, publications):\n        self.assertEqual(len(publications), len(self.expected[fundshare_id][\"publications\"]))\n\n        for language_code, value in publications.iteritems():\n            self.assertEqual(value, self.expected[fundshare_id][\"publications\"][language_code])\n\n            # Verifying coherence between language of each document and the section where the document is displayed\n            for document in value[\"documents\"]:\n                self.assertEqual(document[\"language\"], language_code)\n\n    def __test_nav(self, fundshare_id, nav):\n        for key in self.expected[fundshare_id][\"nav\"].iterkeys():\n            self.assertIn(key, nav)\n            self.assertEqual(nav[key], self.expected[fundshare_id][\"nav\"][key])\n\n    def __test_overview(self, fundshare_id, overview):\n        self.assertIn(\"key_numbers\", overview)\n        self.__test_key_numbers(fundshare_id, overview[\"key_numbers\"])\n\n        expectedOverview = self.expected[fundshare_id][\"overview\"]\n\n        self.assertIn(\"inv_goal\", overview)\n        self.assertEqual(overview[\"inv_goal\"], expectedOverview[\"inv_goal\"])\n\n        self.assertIn(\"registration_countries\", overview)\n        self.assertEqual(overview[\"registration_countries\"], expectedOverview[\"registration_countries\"])\n\n        self.assertIn(\"key_facts\", overview)\n        self.__assert_dict_equals(expectedOverview, overview, \"key_facts\")\n\n    def __test_performances(self, fundshare_id, performances):\n        self.assertEqual(performances[\"risk_analysis\"], self.expected[fundshare_id][\"performances\"][\"risk_analysis\"])\n        if \"quarterly\" in performances[\"perfs\"]:\n            self.assertIn(\"quarterly\", self.expected[fundshare_id][\"performances\"][\"perfs\"])\n            self.assertEquals(performances[\"perfs\"][\"quarterly\"], self.expected[fundshare_id][\"performances\"][\"perfs\"][\"quarterly\"])\n\n    def __assert_dict_equals(self, expected, response, dict_name):\n        self.assertIn(dict_name, response.keys())\n        dictionnary = response[dict_name]\n        for key in expected[dict_name].iterkeys():\n            self.assertIn(key, dictionnary)\n            if type(expected[dict_name][key]) is list:\n                self.assertSequenceEqual(dictionnary[key], expected[dict_name][key])\n            else:\n                self.assertEqual(dictionnary[key], expected[dict_name][key],\n                                 \"expected %s but was %s for key %s\" % (expected[dict_name][key], dictionnary[key], key))\n\n    def __test_key_numbers(self, fundshare_id, key_numbers):\n        # Test the AUM\n        self.assertIn(\"aum\", key_numbers)\n        self.assertEqual(key_numbers[\"aum\"], self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"aum\"])\n\n        # Test the base currency\n        self.assertIn(\"base_currency\", key_numbers)\n        self.assertEqual(key_numbers[\"base_currency\"], self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"base_currency\"])\n\n        # Test the 3 years performances\n        self.assertIn(\"three_years_performances\", key_numbers)\n        self.assertEqual(len(key_numbers[\"three_years_performances\"]), len(self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"three_years_performances\"]))\n        for index in key_numbers[\"three_years_performances\"].iterkeys():\n            self.assertEqual(key_numbers[\"three_years_performances\"][index], self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"three_years_performances\"][index])\n\n        # Test performance_ytd\n        self.assertIn(\"performance_ytd\", key_numbers)\n        self.assertEqual(key_numbers[\"performance_ytd\"], self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"performance_ytd\"])\n\n        # Test the performance for other currencies\n        self.assertIn(\"other_currencies_performances\", key_numbers)\n        for currency in key_numbers[\"other_currencies_performances\"].iterkeys():\n            for index in key_numbers[\"other_currencies_performances\"][currency].iterkeys():\n                self.assertEqual(key_numbers[\"other_currencies_performances\"][currency][index], self.expected[fundshare_id][\"overview\"][\"key_numbers\"][\"other_currencies_performances\"][currency][index])\n\n    def api_call(self, route):\n        \"\"\" Do an API call and return the response object \"\"\"\n        return request('GET', config.API_BASE_PATH+route)\n\n    def api_get(self, route):\n        \"\"\" Get the response \"\"\"\n        response = self.api_call(route)\n\n        response_json = simplejson.loads(response.text)\n\n        self.assertEqual(type(response_json), dict,\n                         \"The response body should be a dict, got %s\" % type(response_json))\n\n        return response_json\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":48},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f26bb838bc6b4fe9f9c6a5943093992aadda50fc","deserializer":"TextBuffer","version":2},{"text":"from requests import request\nimport simplejson\nimport unittest\nfrom config import global_config as config\n\n\nclass RequestValidationTest(unittest.TestCase):\n\n    def test_it_invalidates_wrong_fundshare_id(self):\n        response = simplejson.loads(request('GET', config.API_BASE_PATH+'v3/fundsheet?version=preview&fundshare_generic_id=blah&country=FRA&language=FRE&profile=EX_FR-XDM').text)\n\n        print response\n\n        self.assertEqual(response['exception_message'], 'Invalid generic ID : blah')\n\n    def test_it_invalidates_missing_version(self):\n        response = simplejson.loads(request('GET', config.API_BASE_PATH+'v3/fundsheet?&fundshare_generic_id=7246&country=FRA&language=FRE&profile=EX_FR-XDM').text)\n\n        self.assertEqual(response['message'], 'Missing required parameter version in json or the post body or the query string')\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":52},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet/test_request_validation.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"608b5bdcb4f215a5f69618abb1242b7b2fb4e525","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nimport simplejson\nimport os\nfrom requests import request\nfrom config import global_config as config\nfrom lib.database import DataBase\nfrom lib.security import create_jwt_token\nfrom lib.models import ImportGroup, ImportResult\n\n\"\"\"\n    Tests API responses\n\"\"\"\n\n\ndef get_token():\n    \"\"\" Returns a valid token \"\"\"\n    database = DataBase(use_original_sqlalchemy=True)\n    user = database.find_user('admin')\n    token = create_jwt_token(user)\n    return token\n\n# Define an API token for this session\napi_token = get_token()\n\n\n# Global health test\ndef test_api_responding():\n    response = request('GET', config.API_BASE_PATH)\n\n    assert response.status_code == 200\n    assert 'Hello World' in response.text\n\n\n# Specific case\ndef test_perfs_without_date():\n    response = request('GET', config.API_BASE_PATH+'performance/4659?perf_type=perfrateyear&country=FRA')\n    assert response.status_code == 200\n\n    r = simplejson.loads(response.text)\n    assert len(r) == 20, \"We should find 20 performances\"\n\n\n# Funds flow\ndef test_fund():\n    response = request('GET', config.API_BASE_PATH+'fund?profile=EX_FR-XDM&country=FRA&language=FRE')\n    assert response.status_code == 200\n\n    r = simplejson.loads(response.text)\n    assert r['country'] == 'FRA'\n    assert 'funds_json' in r\n    assert 'compartment' in r['funds_json']['catalog']\n    assert len(r['funds_json']['catalog']['compartment']) == 213\n\n    # Additional data\n    assert 'firstdatenav_internal' in r['funds_json']['catalog']['compartment'][0]['fundshare'][0]['json']\n    assert 'size' in r['funds_json']['catalog']['compartment'][0]['fundshare'][0]['json']['last_share']\n    assert 'date' in r['funds_json']['catalog']['compartment'][0]['fundshare'][0]['json']['last_share']\n\n\n# Check authentification\ndef test_login():\n    payloads_fail = [\n        {'email': 'a', 'password': 'a'},\n        {'email': 'admin', 'password': 'a'},\n    ]\n    payload_success = {'email': 'admin', 'password': 'admin'}\n    url = config.API_BASE_PATH+'auth/login'\n    headers = {'Content-type': 'application/json'}\n\n    for payload in payloads_fail:\n        r = request('POST', url, data=simplejson.dumps(payload), headers=headers)\n        assert r.status_code == 401\n\n    r = request('POST', url, data=simplejson.dumps(payload_success), headers=headers)\n    assert r.status_code == 200\n\n\n# Get import results\ndef test_valuations_integrity_checker():\n    db = DataBase(use_original_sqlalchemy=True)\n\n    # We need an API token\n    headers = {\n        'Authorization': 'Bearer '+api_token\n    }\n\n    # Get the file\n    basepath = os.path.dirname(__file__)\n    files_original = {'file': open(basepath+'/data/load-valuations.xlsx', 'rb')}\n    files_checks = {'file': open(basepath+'/data/check-valuations.xlsx', 'rb')}\n\n    # Callback URL\n    payload = {'callback_message_url': 'http://URLCALLBACK/#'}\n\n    # URLs\n    url_add = config.API_BASE_PATH+'xls?type=valuations'\n    url_check = config.API_BASE_PATH+'xls?type=valuations_integrity_check'\n\n    # Load the VLs a first time\n    r = request('POST', url_add, files=files_original, headers=headers, data=payload, allow_redirects=False)\n    assert r.status_code == 302\n    assert r.headers['Location'][:67] == 'http://URLCALLBACK/#?status=ok&message=File+successfully+loaded+%21'\n\n    # Launch the integrity check\n    r = request('POST', url_check, files=files_checks, headers=headers, data=payload, allow_redirects=False)\n    assert r.status_code == 302\n    assert r.headers['Location'][:67] == 'http://URLCALLBACK/#?status=ok&message=File+successfully+loaded+%21'\n    assert r.headers['Location'][67:77] == '&group_id='\n\n    # Extract group ID\n    group_id = r.headers['Location'][77:]\n\n    # Check results saved in database\n    group = db.session.query(ImportGroup).filter(ImportGroup.id==group_id).one()\n    assert group.file_name == config.BASE_DIR+'/csvfiles/check-valuations.xlsx'\n\n    results = db.session.query(ImportResult).filter(ImportResult.group_id==group_id).order_by(ImportResult.line_number).all()\n    assert len(results) == 4\n    assert results[0].line_name == \"Exemple de VL 1\"\n    assert results[3].line_name == \"VL inexistante\"\n\n    assert results[0].success == True\n    assert results[1].success == True\n    assert results[2].success == False\n    assert results[2].line_result == \"Nav / currency did not match : 12.9 USD\"\n    assert results[3].success == False\n    assert results[3].line_result == \"Not found\"\n\n\n# Others tests\ndef test_routes_status_code():\n    routes = []\n\n    # Dividends\n    routes.extend([\n        ('dividend/13415?country=FRA', 200),\n        ('dividend/13415?country=FRA&currency=EUR', 200),\n        ('dividend/1234567?country=FRA&currency=EUR', 200), # Empty list but 200 code\n    ])\n\n    # Compartments\n    routes.extend([\n        ('compartment?country=FRA&language=FRE&profile=EX_FR-XDM', 200),\n        ('compartment?country=BEL&language=FRE&profile=EX_FR-XDM', 404),\n        ('compartment/13016?country=FRA&language=FRE', 200),\n    ])\n\n    # Funds\n    routes.extend([\n        ('fund?country=FRA&language=FRE&profile=EX_FR-XDM', 200),\n        ('fund?country=FRA&language=FRE&profile=PIOUPIOU', 404),\n    ])\n\n    # Fundshare\n    routes.extend([\n        ('fundshare/3333?country=FRA&language=FRE', 200),\n        ('fundshare/123456789?country=FRA&language=FRE', 404),\n        ('fundshare/3333', 200),\n    ])\n\n    # Valuations\n    routes.extend([\n        ('valuation/10380?country=FRA&date=2014-01-02', 200),\n        ('valuation/1234567689?country=FRA&date=2014-01-02', 404),\n        ('valuation/10380?country=FRA&date=2014-01-02&currency=EUR', 200),\n        ('valuation/10380?country=FRA&date=2014-01-02&currency=KAKA', 404),\n        ('valuation/3333', 400),\n\n        ('valuation_list/10380', 400),\n        ('valuation_list/10380?country=FRA', 200),\n        ('valuation_list/10380?country=FRA&date_begin=2014-01-01', 200),\n        ('valuation_list/10380?country=FRA&date_end=2014-01-01', 200),\n        ('valuation_list/10380?country=FRA&date_begin=2014-01-01&date_begin=2014-12-01', 200),\n    ])\n\n    # Specific valuations\n    routes.extend([\n        ('valuation_spe?fundshare_id=3333&country=FRA', 200),\n        ('valuation_spe?fundshare_id=3333', 400),\n        ('valuation_spe?fundshare_id=3333&country=FRA&vl_type=vl_theam', 200),\n        ('valuation_spe?fundshare_id=14201&country=FRA&vl_type=vl_theam', 200),\n        ('valuation_spe?fundshare_id=14201&country=FRA&vl_type=vl_theam', 200),\n        ('valuation_spe?isin_code=LU0930019236&country=FRA&vl_type=vl_theam', 200),\n        ('valuation_spe?isin_code=dfsdfsdfsdfsd&country=FRA', 404),\n    ])\n\n    # Documents\n    routes.extend([\n        ('documents?container_id=3156&container_type=compartment', 200),\n        ('documents?container_id=3333&container_type=share', 200),\n        ('documents?container_id=0', 400),\n    ])\n\n    # Stats\n    routes.extend([\n        ('stats/3333?country=FRA', 200),\n    ])\n\n    for route in routes:\n        response = request('GET', config.API_BASE_PATH+route[0])\n        assert response.status_code == route[1] \\\n            , \"Route %s should return a %d status code (returned %d)\"\\\n              % (route[0], route[1], response.status_code)\n","markerStore":{"nextMarkerId":31,"markersById":{"0":{"range":{"start":{"row":157,"column":28},"end":{"row":157,"column":28}},"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":10,"undoStack":[{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[157,27],[157,28]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[157,27],[157,28]],"newRange":[[157,27],[157,27]],"oldText":"4","newText":""}},{"type":"checkpoint","id":5,"snapshot":{"0":{"range":[[157,27],[157,27]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":6,"snapshot":{"0":{"range":[[157,27],[157,27]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"25":{"range":[[157,0],[158,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[157,27],[157,27]],"newRange":[[157,27],[157,28]],"oldText":"","newText":"2"}},{"type":"checkpoint","id":7,"snapshot":{"0":{"range":[[157,28],[157,28]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"25":{"range":[[157,0],[158,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":8,"snapshot":{"0":{"range":[[157,28],[157,28]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"28":{"range":[[157,0],[158,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":9,"snapshot":{"0":{"range":[[157,28],[157,28]],"properties":{"type":"selection","editorId":56,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"28":{"range":[[157,0],[158,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d461bd5c23b03c8fbd120fa28285ade3e2571013","deserializer":"TextBuffer","version":2},{"text":"\"\"\"\nDatabase operations related to compartments\n\"\"\"\nfrom .database_object import DataBaseObject\nfrom lib.models import Compartment, Fundshare, CLP\n\nfrom sqlalchemy.orm.exc import NoResultFound\nfrom lib.errors import NoSuchElement\n\nclass CompartmentFactory(DataBaseObject):\n    def get_one(self, **filters):\n        \"\"\" Returns one compartment based on the filters given as argument \"\"\"\n        try:\n            compartment = self.session.query(Compartment)\\\n                .filter_by(**filters)\\\n                .one()\n\n        except NoResultFound:\n            raise NoSuchElement(\"No such compartment!\")\n\n        return compartment\n\n    def get_compartment_from_fundshare(self, fundshare_id, country, language):\n        \"\"\" Returns the compartment's name of a fundshare given a fundshare_id, country, language \"\"\"\n        try:\n            compartment = self.session.query(Compartment)\\\n                .join((Fundshare, Compartment.uid == Fundshare.compartment))\\\n                .filter(Fundshare.id == fundshare_id)\\\n                .filter(Fundshare.country == country)\\\n                .filter(Fundshare.language == language)\\\n                .one()\n        except NoResultFound:\n            raise NoSuchElement(\"No such compartment!\")\n\n        return compartment\n\n    @staticmethod\n    def filter_by_profile(compartments, profile, country, language):\n        \"\"\" Filter the compartments query by the given profile \"\"\"\n\n        # Join the CLP\n        compartments = compartments.join((CLP, Compartment.profiles))\n\n        # Filter !\n        compartments = compartments.filter(\n            CLP.profile == profile,\n            CLP.country == country,\n            CLP.language == language,\n        )\n\n        return compartments\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":60},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/compartment.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"89ce5a83e248e116b7b03f5e8c68f5b06a8fac5a","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker\n\nfrom lib.utils import parse_date\nfrom config import global_config as config\nfrom lib.models import db\n\n\nclass DataBaseObject(object):\n    def __init__(self, use_original_sqlalchemy=False, session=None):\n        self.engine = create_engine(\n            config.POSTGRES_URI,\n            convert_unicode=True,\n        )\n\n        self.keep_alive = False\n\n        if session is not None:\n            self.session = session\n            self.keep_alive = True\n        elif use_original_sqlalchemy:\n            self.session = scoped_session(sessionmaker(\n                autocommit=False,\n                autoflush=False,\n                bind=self.engine\n            ))\n        else:\n            self.session = db.session\n\n    def __del__(self):\n        if self.keep_alive == False:\n            self.session.remove()\n\n    def raw_sql(self, sql):\n        results = self.engine.execute(sql)\n        keys = results.keys()\n        return [self.__row2dict(row, keys) for row in results]\n\n    @staticmethod\n    def __row2dict(row, keys):\n        return {\n            column: getattr(row, column)\n            for column in keys\n        }\n\n    @staticmethod\n    def filter_by_date(model, query_builder, exact_date=None, date_begin=None, date_end=None):\n        \"\"\" Allow to filter the model by date if date constraints are specified \"\"\"\n\n        if exact_date:\n            exact_date = parse_date(exact_date)\n            query_builder = query_builder.filter(model.date == exact_date)\n        else:\n            if date_begin:\n                date_begin = parse_date(date_begin)\n                query_builder = query_builder.filter(model.date >= date_begin)\n            if date_end:\n                date_end = parse_date(date_end)\n                query_builder = query_builder.filter(model.date <= date_end)\n\n        return query_builder\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":64},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/database_object.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"67c9fec6b5776c6d9902acb012d8055293dd2e53","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nfrom sqlalchemy import Integer, Text, ForeignKey, UniqueConstraint\nfrom sqlalchemy.dialects.postgresql import JSON\nfrom sqlalchemy.orm import deferred\nfrom . import db\n\n\nclass CLP(db.Model):\n    \"\"\"\n        A CLP aka Profile\n\n    They are created on BNPP IP's side, manually entered on the admin interface\n     and then used as a key to retrieve the catalog\n    \"\"\"\n\n    __tablename__ = 'clp'\n    id = db.Column(Integer, primary_key=True)\n    country = db.Column(Text)\n    language = db.Column(Text)\n    profile = db.Column(Text)\n    funds_json = deferred(db.Column(JSON))\n    application_id = db.Column(Integer, ForeignKey('application.id'))\n    __table_args__ = (UniqueConstraint('country', 'language', 'profile'),)\n\n    def __toJSON__(self):\n        return {\n            'country': self.country,\n            'language': self.language,\n            'profile': self.profile,\n            'funds_json': self.funds_json,\n        }\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":68},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/clp.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cc1aa5b9c5354388d4793baadc5f8ba2ab0afc98","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nfrom sqlalchemy import Integer, Text, Boolean\nfrom sqlalchemy.dialects.postgresql import JSON\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import UniqueConstraint\nfrom sqlalchemy.orm import relationship, deferred\nfrom . import db\n\n\nassociation_clp_compartment = db.Table(\n    'association_clp_compartment',\n    db.Column('compartment_uid', Integer, ForeignKey('compartment.uid')),\n    db.Column('clp_id', Integer, ForeignKey('clp.id'))\n)\n\n\nclass Compartment(db.Model):\n    __tablename__ = 'compartment'\n    uid = db.Column(Integer, primary_key=True)\n    id = db.Column(Integer)\n    country = db.Column(Text)\n    language = db.Column(Text)\n    locked = db.Column(Boolean)\n    json = deferred(db.Column(JSON))\n    profiles = relationship(\"CLP\",\n                            secondary=association_clp_compartment,\n                            backref='compartments')\n\n    __table_args__ = (UniqueConstraint('country', 'language', 'id'),)\n\n    def __toJSON__(self):\n        return {\n            'uid': self.uid,\n            'id': self.id,\n            'country': self.country,\n            'language': self.language,\n            'locked': self.locked,\n            'json': self.json\n        }\n\n    def __repr__(self):\n        return \"Compartment #%s C=%s L=%s\" % \\\n               (self.id, self.country, self.language)\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":72},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/compartment.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"21a7d5d45f7fecb9741b6b87c92c7d054a77f65c","deserializer":"TextBuffer","version":2},{"text":"__author__ = 'mickael'\nfrom sqlalchemy import Integer, Text, Date\nfrom . import db\n\n\nclass Dividend(db.Model):\n    \"\"\" A dividend, from the valuation flow \"\"\"\n\n    __tablename__ = 'dividend'\n    # Fundshare identification\n    fundshare_id = db.Column(Integer, primary_key=True)\n    country = db.Column(Text, primary_key=True)\n    # The interesting values\n    payment_date = db.Column(Date, primary_key=True)\n    execution_date = db.Column(Date, primary_key=True)\n    currency = db.Column(Text, primary_key=True)\n    value = db.Column(Text)\n\n    def __toJSON__(self):\n        return {\n            'fundshare_id': self.fundshare_id,\n            'country': self.country,\n            'payment_date': str(self.payment_date),\n            'execution_date': str(self.execution_date),\n            'currency': self.currency,\n            'value': self.value,\n        }\n\n    def __repr__(self):\n        return \"<Dividend for #%s C=%s, payment %s execution %s value %s %s>\" % (\n            self.fundshare_id,\n            self.country,\n            self.payment_date,\n            self.execution_date,\n            self.value,\n            self.currency,\n        )\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":76},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/dividend.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b766401d0c857a83f50a126152b2b05af17621a6","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":16,"softTabs":true,"displayBuffer":{"id":17,"softWrapped":true,"scrollTop":5401,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/monolithic_db.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":44,"softTabs":true,"displayBuffer":{"id":45,"softWrapped":true,"scrollTop":745,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v2.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrapped":true,"scrollTop":1536,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrapped":true,"scrollTop":19,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet/test_request_validation.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":56,"softTabs":true,"displayBuffer":{"id":57,"softWrapped":true,"scrollTop":4873,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/tests/test_api.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":60,"softTabs":true,"displayBuffer":{"id":61,"softWrapped":true,"scrollTop":910,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/compartment.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":64,"softTabs":true,"displayBuffer":{"id":65,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/database/database_object.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":68,"softTabs":true,"displayBuffer":{"id":69,"softWrapped":true,"scrollTop":250,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/clp.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":72,"softTabs":true,"displayBuffer":{"id":73,"softWrapped":true,"scrollTop":192,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/compartment.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":76,"softTabs":true,"displayBuffer":{"id":77,"softWrapped":true,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/dividend.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/nico/projects/bnp-ip-flux/backend/lib/models/dividend.py","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-sql","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["get_fundshare","fundshare","isin","test_routes_status_code","fundshare/3333","3333"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/nico/projects/bnp-ip-flux/backend/lib/database/monolithic_db.py":1435593915039,"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v2.py":1435594035227,"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet.py":1435594097658,"/home/nico/projects/bnp-ip-flux/backend/tests/test_api_v3_fundsheet/test_request_validation.py":1435594138804,"/home/nico/projects/bnp-ip-flux/backend/tests/test_api.py":1435594169325,"/home/nico/projects/bnp-ip-flux/backend/lib/database/compartment.py":1435595887795,"/home/nico/projects/bnp-ip-flux/backend/lib/database/database_object.py":1435595893318,"/home/nico/projects/bnp-ip-flux/backend/lib/models/clp.py":1435595897299,"/home/nico/projects/bnp-ip-flux/backend/lib/models/compartment.py":1435595902245,"/home/nico/projects/bnp-ip-flux/backend/lib/models/dividend.py":1435595905709},"keybinding-resolver":{},"metrics":{"sessionLength":4336822},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/nico/projects/bnp-ip-flux":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"backend":{"isExpanded":true,"entries":{"admin":{"isExpanded":false,"entries":{}},"api":{"isExpanded":false,"entries":{}},"api_v2":{"isExpanded":false,"entries":{}},"api_v3":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"csvfiles":{"isExpanded":false,"entries":{}},"deploy":{"isExpanded":false,"entries":{}},"docker-compose":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":true,"entries":{"database":{"isExpanded":false,"entries":{}},"decorators":{"isExpanded":false,"entries":{}},"importer":{"isExpanded":false,"entries":{}},"models":{"isExpanded":true,"entries":{}},"templates":{"isExpanded":false,"entries":{}}}},"migrations":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":false,"entries":{}},"tests":{"isExpanded":false,"entries":{}}}},"doc":{"isExpanded":false,"entries":{}},"frontend":{"isExpanded":false,"entries":{}},"utils":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/nico/projects/bnp-ip-flux/backend/lib/models/dividend.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":302}}}