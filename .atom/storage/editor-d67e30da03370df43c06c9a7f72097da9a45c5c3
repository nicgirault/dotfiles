{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":49,"width":1920,"height":1031,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/nico/projects/bnp-authenticator-api"],"buffers":[{"text":"import re\nimport errors\nimport random\nimport string\nfrom flask import Blueprint, g, request, jsonify\nfrom flask.ext.restful import reqparse\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.orm.exc import NoResultFound\nfrom models import db, User\nfrom utils.response import serialize\nfrom utils.auth import authorize, create_token, decode_confirmation_token, is_email_allowed\nfrom utils import mailer\nimport itsdangerous\n\nuser_blueprint = Blueprint('user', __name__)\n\n\n@user_blueprint.route('/me')\n@authorize\n@serialize\ndef me():\n    return User.query.filter_by(id=g.user_id).one()\n\n\n@user_blueprint.route('/me', methods=['PUT'])\n@authorize\ndef update_profile():\n    user = User.query.filter_by(id=g.user_id).one()\n\n    parser = reqparse.RequestParser()\n    parser.add_argument('profile', type=dict, required=True)\n    request_params = parser.parse_args()\n\n    user.profile = request_params.profile\n    db.session.merge(user)\n    db.session.commit()\n    return 'OK'\n\n\n@user_blueprint.route('/login', methods=['POST'])\ndef login():\n    parser = reqparse.RequestParser()\n    parser.add_argument('email', type=str, required=True)\n    parser.add_argument('password', type=str, required=True)\n    request_params = parser.parse_args()\n\n    try:\n        user = User.query.filter_by(email=request_params.email).one()\n    except NoResultFound as e:\n        response = jsonify(error_code = errors.WRONG_USER_OR_PASSWORD)\n        response.status_code = 404\n        return response\n\n    if not user.check_password(request_params.password):\n        response = jsonify(error_code = errors.WRONG_USER_OR_PASSWORD)\n        response.status_code = 401\n        return response\n\n    if not user.is_active:\n        response = jsonify(error_code = errors.ACCOUNT_NOT_ACTIVATED)\n        response.status_code = 401\n        return response\n\n    return jsonify({\n        'token': create_token(user)\n    })\n\n\n@user_blueprint.route('/activate', methods=['POST'])\ndef activate():\n    parser = reqparse.RequestParser()\n    parser.add_argument('token', type=str, required=True)\n    request_params = parser.parse_args()\n    try:\n        email = decode_confirmation_token(request_params.token)\n        user = User.query.filter_by(email=email).one()\n        user.is_active = True\n        db.session.add(user)\n        db.session.commit()\n\n        return 'Account activated'\n    except itsdangerous.BadSignature as e:\n        response = jsonify(message='Token is invalid')\n        response.status_code = 400\n        return response\n\n\n@user_blueprint.route('/signup', methods=['POST'])\ndef signup():\n    parser = reqparse.RequestParser()\n    parser.add_argument('email', type=str, required=True)\n    parser.add_argument('password', type=str, required=True)\n    request_params = parser.parse_args()\n    try:\n        # Bouh this is ugly pls change this ASAParvest implements it\n        retail_pattern = '(retail|127\\.0\\.0\\.1\\:5013)'\n        if request.referrer and re.search(pattern=retail_pattern, string=request.referrer):\n            if not is_email_allowed(request_params.email):\n                response = jsonify(error_code = errors.EMAIL_NOT_ALLOWED)\n                response.status_code = 400\n                return response\n            must_activate = True\n        else:\n            must_activate = False\n\n        user = User.create(email=request_params.email, password=request_params.password, must_activate=must_activate)\n        db.session.add(user)\n        db.session.commit()\n\n        mailer.send_signup_mail(user)\n        return jsonify({\n            'token': create_token(user)\n        })\n    except IntegrityError as e:\n        error_origin = e.orig.args[0]\n        if 'duplicate key value violates unique constraint' in error_origin:\n            error_code = errors.USER_ALREADY_EXISTS\n            pattern = '^duplicate key value violates unique constraint \"([^\"]*)\"'\n            field_parser = re.match(pattern=pattern, string=error_origin)\n            response = jsonify(error_code=error_code, field=field_parser.group(1))\n            response.status_code = 403\n            return response\n\n\n@user_blueprint.route('/game/<game_name>/users', methods=['GET'])\ndef user_list(game_name):\n    users = User.query.all()\n    if users is None:\n        user_list = []\n    else:\n        user_list = [\n            user.to_json() for user in users\n            if user.profile is not None and game_name in user.profile\n        ]\n    return jsonify(users=user_list)\n\n\n@user_blueprint.route('/team', methods=['GET'])\n@authorize\ndef user_profile():\n    users = User.query.filter(User.email.in_(request.args.getlist('users'))).all()\n    users = [user.to_json() for user in users]\n    return jsonify(users=users)\n\n\n@user_blueprint.route('/user', methods=['GET'])\ndef get_users():\n    result = {}\n    emails = request.args.getlist('emails')\n    if not (emails is None or emails == []):\n        users = User.query.filter(User.email.in_(emails)).all()\n        result = {\n            user.email: {\n                'id': user.id,\n                'nickname': user.profile.get('nickname'),\n                'avatar': user.profile.get('avatar'),\n            } for user in users\n        }\n\n    user_ids = request.args.getlist('ids')\n    if not (user_ids is None or user_ids == []):\n        user_ids = [int(id) for id in user_ids]\n        users = User.query.filter(User.id.in_(user_ids)).all()\n        result = {\n            user.id: {\n                'email': user.email,\n                'nickname': user.profile.get('nickname'),\n                'avatar': user.profile.get('avatar'),\n            } for user in users\n        }\n    return jsonify(result)\n\n@user_blueprint.route('/reset-password', methods=['POST'])\ndef reset_password():\n    parser = reqparse.RequestParser()\n    parser.add_argument('email', type=str, required=True)\n    request_params = parser.parse_args()\n\n    try:\n        user = User.query.filter_by(email=request_params.email).one()\n    except NoResultFound as e:\n        response = jsonify(error_code = errors.WRONG_USER_OR_PASSWORD)\n        response.status_code = 404\n        return response\n\n    new_password = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(8))\n\n    user.set_password(new_password)\n    db.session.merge(user)\n    db.session.commit()\n\n    mailer.send_reset_password_mail(user, new_password)\n\n    return 'OK'\n\n@user_blueprint.route('/change-password', methods=['PUT'])\n@authorize\ndef change_password():\n    user = User.query.filter_by(id=g.user_id).one()\n\n    parser = reqparse.RequestParser()\n    parser.add_argument('old_password', type=str, required=True)\n    parser.add_argument('new_password', type=str, required=True)\n    request_params = parser.parse_args()\n\n    if not user.check_password(request_params.old_password):\n        response = jsonify(error_code = errors.WRONG_USER_OR_PASSWORD)\n        response.status_code = 400\n        return response\n\n    user.set_password(request_params.new_password)\n    db.session.merge(user)\n    db.session.commit()\n\n    return 'OK'\n","markerStore":{"nextMarkerId":11,"markersById":{"0":{"range":{"start":{"row":168,"column":21},"end":{"row":168,"column":21}},"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":46,"undoStack":[{"type":"checkpoint","id":2,"snapshot":{"0":{"range":[[154,57],[154,57]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":3,"snapshot":{"0":{"range":[[154,57],[154,57]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":4,"snapshot":{"0":{"range":[[154,57],[154,57]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[154,0],[154,0]],"newRange":[[154,0],[155,0]],"oldText":"","newText":"                'nickname': user.profile.get('nickname'),\n"}},{"type":"checkpoint","id":7,"snapshot":{"0":{"range":[[155,57],[155,57]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":8,"snapshot":{"0":{"range":[[155,17],[155,25]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[155,17],[155,25]],"newRange":[[155,17],[155,18]],"oldText":"nickname","newText":"q"}},{"type":"checkpoint","id":9,"snapshot":{"0":{"range":[[155,18],[155,18]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":10,"snapshot":{"0":{"range":[[155,18],[155,18]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[155,17],[155,18]],"newRange":[[155,17],[155,17]],"oldText":"q","newText":""}},{"type":"checkpoint","id":13,"snapshot":{"0":{"range":[[155,17],[155,17]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":14,"snapshot":{"0":{"range":[[155,17],[155,17]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"3":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[155,17],[155,17]],"newRange":[[155,17],[155,18]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[155,18],[155,18]],"newRange":[[155,18],[155,19]],"oldText":"","newText":"v"}},{"type":"change","content":{"oldRange":[[155,19],[155,19]],"newRange":[[155,19],[155,20]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[155,20],[155,20]],"newRange":[[155,20],[155,21]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[155,21],[155,21]],"newRange":[[155,21],[155,22]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[155,22],[155,22]],"newRange":[[155,22],[155,23]],"oldText":"","newText":"r"}},{"type":"checkpoint","id":25,"snapshot":{"0":{"range":[[155,23],[155,23]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"3":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":26,"snapshot":{"0":{"range":[[155,44],[155,52]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"5":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[155,44],[155,52]],"newRange":[[155,44],[155,45]],"oldText":"nickname","newText":"a"}},{"type":"checkpoint","id":27,"snapshot":{"0":{"range":[[155,45],[155,45]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"5":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":28,"snapshot":{"0":{"range":[[155,45],[155,45]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"6":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[155,45],[155,45]],"newRange":[[155,45],[155,46]],"oldText":"","newText":"v"}},{"type":"change","content":{"oldRange":[[155,46],[155,46]],"newRange":[[155,46],[155,47]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[155,47],[155,47]],"newRange":[[155,47],[155,48]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[155,48],[155,48]],"newRange":[[155,48],[155,49]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[155,49],[155,49]],"newRange":[[155,49],[155,50]],"oldText":"","newText":"r"}},{"type":"checkpoint","id":37,"snapshot":{"0":{"range":[[155,50],[155,50]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"6":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"7":{"range":[[155,44],[155,44]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}}},{"type":"checkpoint","id":38,"snapshot":{"0":{"range":[[155,27],[155,27]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"8":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":39,"snapshot":{"0":{"range":[[155,27],[155,27]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"8":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":40,"snapshot":{"0":{"range":[[167,21],[167,21]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"8":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[167,0],[167,0]],"newRange":[[167,0],[168,0]],"oldText":"","newText":"                'avatar': user.profile.get('avatar'),\n"}},{"type":"checkpoint","id":43,"snapshot":{"0":{"range":[[168,21],[168,21]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"8":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":44,"snapshot":{"0":{"range":[[168,21],[168,21]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"9":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"10":{"range":[[167,0],[168,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":45,"snapshot":{"0":{"range":[[168,21],[168,21]],"properties":{"type":"selection","editorId":4,"goalScreenRange":null,"autoscroll":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"9":{"range":[[155,0],[156,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"10":{"range":[[167,0],[168,0]],"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/nico/projects/bnp-authenticator-api/src/routes/user.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"de8a421025cde73ea10f1893e3deb7bd3f2403fe","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"scrollTop":5123,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/nico/projects/bnp-authenticator-api/src/routes/user.py","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/nico/projects/bnp-authenticator-api/src/routes/user.py","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/home/nico/projects/bnp-authenticator-api/src/routes/user.py":1435582406142},"metrics":{"sessionLength":3452142},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/nico/projects/bnp-authenticator-api":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"migrations":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"models":{"isExpanded":false,"entries":{}},"routes":{"isExpanded":true,"entries":{}},"utils":{"isExpanded":false,"entries":{}}}},"utils":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/nico/projects/bnp-authenticator-api/src/routes/user.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}